/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.code.libyuv;

public class libyuv implements libyuvConstants {
  public static long HashDjb2(java.nio.ByteBuffer src, java.math.BigInteger count, long seed) {
  assert src.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.HashDjb2(src, count, seed);
    }
  }

  public static java.math.BigInteger ComputeSumSquareError(java.nio.ByteBuffer src_a, java.nio.ByteBuffer src_b, int count) {
  assert src_a.isDirect() : "Buffer must be allocated direct.";
  assert src_b.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ComputeSumSquareError(src_a, src_b, count);
    }
  }

  public static java.math.BigInteger ComputeSumSquareErrorPlane(java.nio.ByteBuffer src_a, int stride_a, java.nio.ByteBuffer src_b, int stride_b, int width, int height) {
  assert src_a.isDirect() : "Buffer must be allocated direct.";
  assert src_b.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ComputeSumSquareErrorPlane(src_a, stride_a, src_b, stride_b, width, height);
    }
  }

  public static int getKMaxPsnr() {
    return libyuvJNI.kMaxPsnr_get();
  }

  public static double SumSquareErrorToPsnr(java.math.BigInteger sse, java.math.BigInteger count) {
    return libyuvJNI.SumSquareErrorToPsnr(sse, count);
  }

  public static double CalcFramePsnr(java.nio.ByteBuffer src_a, int stride_a, java.nio.ByteBuffer src_b, int stride_b, int width, int height) {
  assert src_a.isDirect() : "Buffer must be allocated direct.";
  assert src_b.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.CalcFramePsnr(src_a, stride_a, src_b, stride_b, width, height);
    }
  }

  public static double I420Psnr(java.nio.ByteBuffer src_y_a, int stride_y_a, java.nio.ByteBuffer src_u_a, int stride_u_a, java.nio.ByteBuffer src_v_a, int stride_v_a, java.nio.ByteBuffer src_y_b, int stride_y_b, java.nio.ByteBuffer src_u_b, int stride_u_b, java.nio.ByteBuffer src_v_b, int stride_v_b, int width, int height) {
  assert src_y_a.isDirect() : "Buffer must be allocated direct.";
  assert src_u_a.isDirect() : "Buffer must be allocated direct.";
  assert src_v_a.isDirect() : "Buffer must be allocated direct.";
  assert src_y_b.isDirect() : "Buffer must be allocated direct.";
  assert src_u_b.isDirect() : "Buffer must be allocated direct.";
  assert src_v_b.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420Psnr(src_y_a, stride_y_a, src_u_a, stride_u_a, src_v_a, stride_v_a, src_y_b, stride_y_b, src_u_b, stride_u_b, src_v_b, stride_v_b, width, height);
    }
  }

  public static double CalcFrameSsim(java.nio.ByteBuffer src_a, int stride_a, java.nio.ByteBuffer src_b, int stride_b, int width, int height) {
  assert src_a.isDirect() : "Buffer must be allocated direct.";
  assert src_b.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.CalcFrameSsim(src_a, stride_a, src_b, stride_b, width, height);
    }
  }

  public static double I420Ssim(java.nio.ByteBuffer src_y_a, int stride_y_a, java.nio.ByteBuffer src_u_a, int stride_u_a, java.nio.ByteBuffer src_v_a, int stride_v_a, java.nio.ByteBuffer src_y_b, int stride_y_b, java.nio.ByteBuffer src_u_b, int stride_u_b, java.nio.ByteBuffer src_v_b, int stride_v_b, int width, int height) {
  assert src_y_a.isDirect() : "Buffer must be allocated direct.";
  assert src_u_a.isDirect() : "Buffer must be allocated direct.";
  assert src_v_a.isDirect() : "Buffer must be allocated direct.";
  assert src_y_b.isDirect() : "Buffer must be allocated direct.";
  assert src_u_b.isDirect() : "Buffer must be allocated direct.";
  assert src_v_b.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420Ssim(src_y_a, stride_y_a, src_u_a, stride_u_a, src_v_a, stride_v_a, src_y_b, stride_y_b, src_u_b, stride_u_b, src_v_b, stride_v_b, width, height);
    }
  }

  public static int I444ToI420(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I444ToI420(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int I422ToI420(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I422ToI420(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int I411ToI420(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I411ToI420(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int I420Copy(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420Copy(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int I400ToI420(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I400ToI420(src_y, src_stride_y, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int NV12ToI420(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_uv, int src_stride_uv, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.NV12ToI420(src_y, src_stride_y, src_uv, src_stride_uv, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int NV21ToI420(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_vu, int src_stride_vu, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_vu.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.NV21ToI420(src_y, src_stride_y, src_vu, src_stride_vu, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int YUY2ToI420(java.nio.ByteBuffer src_yuy2, int src_stride_yuy2, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.YUY2ToI420(src_yuy2, src_stride_yuy2, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int UYVYToI420(java.nio.ByteBuffer src_uyvy, int src_stride_uyvy, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.UYVYToI420(src_uyvy, src_stride_uyvy, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int M420ToI420(java.nio.ByteBuffer src_m420, int src_stride_m420, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_m420.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.M420ToI420(src_m420, src_stride_m420, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int Q420ToI420(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_yuy2, int src_stride_yuy2, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.Q420ToI420(src_y, src_stride_y, src_yuy2, src_stride_yuy2, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int ARGBToI420(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToI420(src_frame, src_stride_frame, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int BGRAToI420(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.BGRAToI420(src_frame, src_stride_frame, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int ABGRToI420(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ABGRToI420(src_frame, src_stride_frame, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int RGBAToI420(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.RGBAToI420(src_frame, src_stride_frame, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int RGB24ToI420(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.RGB24ToI420(src_frame, src_stride_frame, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int RAWToI420(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.RAWToI420(src_frame, src_stride_frame, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int RGB565ToI420(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.RGB565ToI420(src_frame, src_stride_frame, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int ARGB1555ToI420(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGB1555ToI420(src_frame, src_stride_frame, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int ARGB4444ToI420(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGB4444ToI420(src_frame, src_stride_frame, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int ConvertToI420(java.nio.ByteBuffer src_frame, long src_size, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int crop_x, int crop_y, int src_width, int src_height, int crop_width, int crop_height, RotationModeEnum rotation, long format) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ConvertToI420(src_frame, src_size, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, crop_x, crop_y, src_width, src_height, crop_width, crop_height, rotation.swigValue(), format);
    }
  }

  public static int ARGBCopy(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBCopy(src_argb, src_stride_argb, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int I420ToARGB(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToARGB(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int I422ToARGB(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I422ToARGB(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int I444ToARGB(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I444ToARGB(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int I411ToARGB(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I411ToARGB(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int I400ToARGB(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I400ToARGB(src_y, src_stride_y, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int I400ToARGB_Reference(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I400ToARGB_Reference(src_y, src_stride_y, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int NV12ToARGB(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_uv, int src_stride_uv, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.NV12ToARGB(src_y, src_stride_y, src_uv, src_stride_uv, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int NV21ToARGB(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_vu, int src_stride_vu, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_vu.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.NV21ToARGB(src_y, src_stride_y, src_vu, src_stride_vu, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int M420ToARGB(java.nio.ByteBuffer src_m420, int src_stride_m420, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_m420.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.M420ToARGB(src_m420, src_stride_m420, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int YUY2ToARGB(java.nio.ByteBuffer src_yuy2, int src_stride_yuy2, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.YUY2ToARGB(src_yuy2, src_stride_yuy2, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int UYVYToARGB(java.nio.ByteBuffer src_uyvy, int src_stride_uyvy, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.UYVYToARGB(src_uyvy, src_stride_uyvy, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int BGRAToARGB(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.BGRAToARGB(src_frame, src_stride_frame, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int ABGRToARGB(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ABGRToARGB(src_frame, src_stride_frame, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int RGBAToARGB(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.RGBAToARGB(src_frame, src_stride_frame, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int RGB24ToARGB(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.RGB24ToARGB(src_frame, src_stride_frame, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int RAWToARGB(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.RAWToARGB(src_frame, src_stride_frame, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int RGB565ToARGB(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.RGB565ToARGB(src_frame, src_stride_frame, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int ARGB1555ToARGB(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGB1555ToARGB(src_frame, src_stride_frame, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int ARGB4444ToARGB(java.nio.ByteBuffer src_frame, int src_stride_frame, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGB4444ToARGB(src_frame, src_stride_frame, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int ConvertToARGB(java.nio.ByteBuffer src_frame, long src_size, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int crop_x, int crop_y, int src_width, int src_height, int crop_width, int crop_height, RotationModeEnum rotation, long format) {
  assert src_frame.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ConvertToARGB(src_frame, src_size, dst_argb, dst_stride_argb, crop_x, crop_y, src_width, src_height, crop_width, crop_height, rotation.swigValue(), format);
    }
  }

  public static int I420ToI422(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToI422(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int I420ToI444(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToI444(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int I420ToI411(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToI411(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int I400Copy(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer dst_y, int dst_stride_y, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I400Copy(src_y, src_stride_y, dst_y, dst_stride_y, width, height);
    }
  }

  public static int I420ToNV12(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_uv, int dst_stride_uv, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_uv.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToNV12(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_y, dst_stride_y, dst_uv, dst_stride_uv, width, height);
    }
  }

  public static int I420ToNV21(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_vu, int dst_stride_vu, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_vu.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToNV21(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_y, dst_stride_y, dst_vu, dst_stride_vu, width, height);
    }
  }

  public static int I420ToYUY2(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_frame, int dst_stride_frame, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_frame.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToYUY2(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_frame, dst_stride_frame, width, height);
    }
  }

  public static int I420ToUYVY(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_frame, int dst_stride_frame, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_frame.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToUYVY(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_frame, dst_stride_frame, width, height);
    }
  }

  public static int I420ToBGRA(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToBGRA(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int I420ToABGR(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToABGR(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int I420ToRGBA(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_rgba, int dst_stride_rgba, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgba.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToRGBA(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_rgba, dst_stride_rgba, width, height);
    }
  }

  public static int I420ToRGB24(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_frame, int dst_stride_frame, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_frame.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToRGB24(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_frame, dst_stride_frame, width, height);
    }
  }

  public static int I420ToRAW(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_frame, int dst_stride_frame, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_frame.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToRAW(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_frame, dst_stride_frame, width, height);
    }
  }

  public static int I420ToRGB565(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_frame, int dst_stride_frame, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_frame.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToRGB565(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_frame, dst_stride_frame, width, height);
    }
  }

  public static int I420ToARGB1555(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_frame, int dst_stride_frame, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_frame.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToARGB1555(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_frame, dst_stride_frame, width, height);
    }
  }

  public static int I420ToARGB4444(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_frame, int dst_stride_frame, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_frame.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToARGB4444(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_frame, dst_stride_frame, width, height);
    }
  }

  public static int ConvertFromI420(java.nio.ByteBuffer y, int y_stride, java.nio.ByteBuffer u, int u_stride, java.nio.ByteBuffer v, int v_stride, java.nio.ByteBuffer dst_sample, int dst_sample_stride, int width, int height, long format) {
  assert y.isDirect() : "Buffer must be allocated direct.";
  assert u.isDirect() : "Buffer must be allocated direct.";
  assert v.isDirect() : "Buffer must be allocated direct.";
  assert dst_sample.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ConvertFromI420(y, y_stride, u, u_stride, v, v_stride, dst_sample, dst_sample_stride, width, height, format);
    }
  }

  public static int ARGBToBGRA(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_bgra, int dst_stride_bgra, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bgra.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToBGRA(src_argb, src_stride_argb, dst_bgra, dst_stride_bgra, width, height);
    }
  }

  public static int ARGBToABGR(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_abgr, int dst_stride_abgr, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_abgr.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToABGR(src_argb, src_stride_argb, dst_abgr, dst_stride_abgr, width, height);
    }
  }

  public static int ARGBToRGBA(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_rgba, int dst_stride_rgba, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgba.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToRGBA(src_argb, src_stride_argb, dst_rgba, dst_stride_rgba, width, height);
    }
  }

  public static int ARGBToRGB24(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_rgb24, int dst_stride_rgb24, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb24.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToRGB24(src_argb, src_stride_argb, dst_rgb24, dst_stride_rgb24, width, height);
    }
  }

  public static int ARGBToRAW(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_rgb, int dst_stride_rgb, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToRAW(src_argb, src_stride_argb, dst_rgb, dst_stride_rgb, width, height);
    }
  }

  public static int ARGBToRGB565(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_rgb565, int dst_stride_rgb565, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb565.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToRGB565(src_argb, src_stride_argb, dst_rgb565, dst_stride_rgb565, width, height);
    }
  }

  public static int ARGBToARGB1555(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb1555, int dst_stride_argb1555, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb1555.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToARGB1555(src_argb, src_stride_argb, dst_argb1555, dst_stride_argb1555, width, height);
    }
  }

  public static int ARGBToARGB4444(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb4444, int dst_stride_argb4444, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb4444.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToARGB4444(src_argb, src_stride_argb, dst_argb4444, dst_stride_argb4444, width, height);
    }
  }

  public static int ARGBToI444(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToI444(src_argb, src_stride_argb, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int ARGBToI422(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToI422(src_argb, src_stride_argb, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int ARGBToJ420(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_yj, int dst_stride_yj, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_yj.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToJ420(src_argb, src_stride_argb, dst_yj, dst_stride_yj, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int ARGBToI411(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToI411(src_argb, src_stride_argb, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int ARGBToJ400(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_yj, int dst_stride_yj, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_yj.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToJ400(src_argb, src_stride_argb, dst_yj, dst_stride_yj, width, height);
    }
  }

  public static int ARGBToI400(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_y, int dst_stride_y, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToI400(src_argb, src_stride_argb, dst_y, dst_stride_y, width, height);
    }
  }

  public static int ARGBToNV12(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_uv, int dst_stride_uv, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_uv.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToNV12(src_argb, src_stride_argb, dst_y, dst_stride_y, dst_uv, dst_stride_uv, width, height);
    }
  }

  public static int ARGBToNV21(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_vu, int dst_stride_vu, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_vu.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToNV21(src_argb, src_stride_argb, dst_y, dst_stride_y, dst_vu, dst_stride_vu, width, height);
    }
  }

  public static int ARGBToYUY2(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_yuy2, int dst_stride_yuy2, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_yuy2.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToYUY2(src_argb, src_stride_argb, dst_yuy2, dst_stride_yuy2, width, height);
    }
  }

  public static int ARGBToUYVY(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_uyvy, int dst_stride_uyvy, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_uyvy.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToUYVY(src_argb, src_stride_argb, dst_uyvy, dst_stride_uyvy, width, height);
    }
  }

  public static int BayerBGGRToI420(java.nio.ByteBuffer src_bayer, int src_stride_bayer, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_bayer.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.BayerBGGRToI420(src_bayer, src_stride_bayer, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int BayerGBRGToI420(java.nio.ByteBuffer src_bayer, int src_stride_bayer, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_bayer.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.BayerGBRGToI420(src_bayer, src_stride_bayer, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int BayerGRBGToI420(java.nio.ByteBuffer src_bayer, int src_stride_bayer, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_bayer.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.BayerGRBGToI420(src_bayer, src_stride_bayer, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int BayerRGGBToI420(java.nio.ByteBuffer src_bayer, int src_stride_bayer, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_bayer.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.BayerRGGBToI420(src_bayer, src_stride_bayer, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int BayerToI420(java.nio.ByteBuffer src_bayer, int src_stride_bayer, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height, long src_fourcc_bayer) {
  assert src_bayer.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.BayerToI420(src_bayer, src_stride_bayer, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height, src_fourcc_bayer);
    }
  }

  public static int I420ToBayerBGGR(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_frame, int dst_stride_frame, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_frame.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToBayerBGGR(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_frame, dst_stride_frame, width, height);
    }
  }

  public static int I420ToBayerGBRG(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_frame, int dst_stride_frame, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_frame.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToBayerGBRG(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_frame, dst_stride_frame, width, height);
    }
  }

  public static int I420ToBayerGRBG(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_frame, int dst_stride_frame, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_frame.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToBayerGRBG(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_frame, dst_stride_frame, width, height);
    }
  }

  public static int I420ToBayerRGGB(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_frame, int dst_stride_frame, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_frame.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToBayerRGGB(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_frame, dst_stride_frame, width, height);
    }
  }

  public static int I420ToBayer(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_frame, int dst_stride_frame, int width, int height, long dst_fourcc_bayer) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_frame.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToBayer(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_frame, dst_stride_frame, width, height, dst_fourcc_bayer);
    }
  }

  public static int BayerBGGRToARGB(java.nio.ByteBuffer src_bayer, int src_stride_bayer, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_bayer.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.BayerBGGRToARGB(src_bayer, src_stride_bayer, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int BayerGBRGToARGB(java.nio.ByteBuffer src_bayer, int src_stride_bayer, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_bayer.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.BayerGBRGToARGB(src_bayer, src_stride_bayer, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int BayerGRBGToARGB(java.nio.ByteBuffer src_bayer, int src_stride_bayer, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_bayer.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.BayerGRBGToARGB(src_bayer, src_stride_bayer, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int BayerRGGBToARGB(java.nio.ByteBuffer src_bayer, int src_stride_bayer, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_bayer.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.BayerRGGBToARGB(src_bayer, src_stride_bayer, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int BayerToARGB(java.nio.ByteBuffer src_bayer, int src_stride_bayer, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height, long src_fourcc_bayer) {
  assert src_bayer.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.BayerToARGB(src_bayer, src_stride_bayer, dst_argb, dst_stride_argb, width, height, src_fourcc_bayer);
    }
  }

  public static int ARGBToBayerBGGR(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_bayer, int dst_stride_bayer, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bayer.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToBayerBGGR(src_argb, src_stride_argb, dst_bayer, dst_stride_bayer, width, height);
    }
  }

  public static int ARGBToBayerGBRG(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_bayer, int dst_stride_bayer, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bayer.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToBayerGBRG(src_argb, src_stride_argb, dst_bayer, dst_stride_bayer, width, height);
    }
  }

  public static int ARGBToBayerGRBG(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_bayer, int dst_stride_bayer, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bayer.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToBayerGRBG(src_argb, src_stride_argb, dst_bayer, dst_stride_bayer, width, height);
    }
  }

  public static int ARGBToBayerRGGB(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_bayer, int dst_stride_bayer, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bayer.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToBayerRGGB(src_argb, src_stride_argb, dst_bayer, dst_stride_bayer, width, height);
    }
  }

  public static int ARGBToBayer(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_bayer, int dst_stride_bayer, int width, int height, long dst_fourcc_bayer) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bayer.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBToBayer(src_argb, src_stride_argb, dst_bayer, dst_stride_bayer, width, height, dst_fourcc_bayer);
    }
  }

  public static int ValidateJpeg(java.nio.ByteBuffer sample, long sample_size) {
  assert sample.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ValidateJpeg(sample, sample_size);
    }
  }

  public static long getKUnknownDataSize() {
    return libyuvJNI.kUnknownDataSize_get();
  }

  public static void CopyPlane(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer dst_y, int dst_stride_y, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.CopyPlane(src_y, src_stride_y, dst_y, dst_stride_y, width, height);
    }
  }

  public static void CopyPlane_16(SWIGTYPE_p_unsigned_short src_y, int src_stride_y, SWIGTYPE_p_unsigned_short dst_y, int dst_stride_y, int width, int height) {
    libyuvJNI.CopyPlane_16(SWIGTYPE_p_unsigned_short.getCPtr(src_y), src_stride_y, SWIGTYPE_p_unsigned_short.getCPtr(dst_y), dst_stride_y, width, height);
  }

  public static void SetPlane(java.nio.ByteBuffer dst_y, int dst_stride_y, int width, int height, long value) {
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SetPlane(dst_y, dst_stride_y, width, height, value);
    }
  }

  public static int I400ToI400(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer dst_y, int dst_stride_y, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I400ToI400(src_y, src_stride_y, dst_y, dst_stride_y, width, height);
    }
  }

  public static int I422Copy(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I422Copy(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int I444Copy(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I444Copy(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int YUY2ToI422(java.nio.ByteBuffer src_yuy2, int src_stride_yuy2, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.YUY2ToI422(src_yuy2, src_stride_yuy2, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int UYVYToI422(java.nio.ByteBuffer src_uyvy, int src_stride_uyvy, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.UYVYToI422(src_uyvy, src_stride_uyvy, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int I420ToI400(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_y, int dst_stride_y, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420ToI400(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_y, dst_stride_y, width, height);
    }
  }

  public static int I420Mirror(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420Mirror(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, width, height);
    }
  }

  public static int I400Mirror(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer dst_y, int dst_stride_y, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I400Mirror(src_y, src_stride_y, dst_y, dst_stride_y, width, height);
    }
  }

  public static int ARGBMirror(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBMirror(src_argb, src_stride_argb, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int NV12ToRGB565(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_uv, int src_stride_uv, java.nio.ByteBuffer dst_rgb565, int dst_stride_rgb565, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb565.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.NV12ToRGB565(src_y, src_stride_y, src_uv, src_stride_uv, dst_rgb565, dst_stride_rgb565, width, height);
    }
  }

  public static int NV21ToRGB565(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_uv, int src_stride_uv, java.nio.ByteBuffer dst_rgb565, int dst_stride_rgb565, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb565.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.NV21ToRGB565(src_y, src_stride_y, src_uv, src_stride_uv, dst_rgb565, dst_stride_rgb565, width, height);
    }
  }

  public static int I422ToBGRA(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_bgra, int dst_stride_bgra, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_bgra.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I422ToBGRA(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_bgra, dst_stride_bgra, width, height);
    }
  }

  public static int I422ToABGR(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_abgr, int dst_stride_abgr, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_abgr.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I422ToABGR(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_abgr, dst_stride_abgr, width, height);
    }
  }

  public static int I422ToRGBA(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_rgba, int dst_stride_rgba, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgba.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I422ToRGBA(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_rgba, dst_stride_rgba, width, height);
    }
  }

  public static int I420Rect(java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int x, int y, int width, int height, int value_y, int value_u, int value_v) {
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420Rect(dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, x, y, width, height, value_y, value_u, value_v);
    }
  }

  public static int ARGBRect(java.nio.ByteBuffer dst_argb, int dst_stride_argb, int x, int y, int width, int height, long value) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBRect(dst_argb, dst_stride_argb, x, y, width, height, value);
    }
  }

  public static int ARGBGrayTo(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBGrayTo(src_argb, src_stride_argb, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int ARGBGray(java.nio.ByteBuffer dst_argb, int dst_stride_argb, int x, int y, int width, int height) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBGray(dst_argb, dst_stride_argb, x, y, width, height);
    }
  }

  public static int ARGBSepia(java.nio.ByteBuffer dst_argb, int dst_stride_argb, int x, int y, int width, int height) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBSepia(dst_argb, dst_stride_argb, x, y, width, height);
    }
  }

  public static int ARGBColorMatrix(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb, int dst_stride_argb, SWIGTYPE_p_signed_char matrix_argb, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBColorMatrix(src_argb, src_stride_argb, dst_argb, dst_stride_argb, SWIGTYPE_p_signed_char.getCPtr(matrix_argb), width, height);
    }
  }

  public static int RGBColorMatrix(java.nio.ByteBuffer dst_argb, int dst_stride_argb, SWIGTYPE_p_signed_char matrix_rgb, int x, int y, int width, int height) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.RGBColorMatrix(dst_argb, dst_stride_argb, SWIGTYPE_p_signed_char.getCPtr(matrix_rgb), x, y, width, height);
    }
  }

  public static int ARGBColorTable(java.nio.ByteBuffer dst_argb, int dst_stride_argb, java.nio.ByteBuffer table_argb, int x, int y, int width, int height) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert table_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBColorTable(dst_argb, dst_stride_argb, table_argb, x, y, width, height);
    }
  }

  public static int RGBColorTable(java.nio.ByteBuffer dst_argb, int dst_stride_argb, java.nio.ByteBuffer table_argb, int x, int y, int width, int height) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert table_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.RGBColorTable(dst_argb, dst_stride_argb, table_argb, x, y, width, height);
    }
  }

  public static int ARGBLumaColorTable(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb, int dst_stride_argb, java.nio.ByteBuffer luma_rgb_table, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert luma_rgb_table.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBLumaColorTable(src_argb, src_stride_argb, dst_argb, dst_stride_argb, luma_rgb_table, width, height);
    }
  }

  public static int ARGBPolynomial(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb, int dst_stride_argb, SWIGTYPE_p_float poly, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBPolynomial(src_argb, src_stride_argb, dst_argb, dst_stride_argb, SWIGTYPE_p_float.getCPtr(poly), width, height);
    }
  }

  public static int ARGBQuantize(java.nio.ByteBuffer dst_argb, int dst_stride_argb, int scale, int interval_size, int interval_offset, int x, int y, int width, int height) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBQuantize(dst_argb, dst_stride_argb, scale, interval_size, interval_offset, x, y, width, height);
    }
  }

  public static int ARGBCopyAlpha(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBCopyAlpha(src_argb, src_stride_argb, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int ARGBCopyYToAlpha(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBCopyYToAlpha(src_y, src_stride_y, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static SWIGTYPE_p_f_p_q_const__unsigned_char_p_q_const__unsigned_char_p_unsigned_char_int__void GetARGBBlend() {
    long cPtr = libyuvJNI.GetARGBBlend();
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_q_const__unsigned_char_p_q_const__unsigned_char_p_unsigned_char_int__void(cPtr, false);
  }

  public static int ARGBBlend(java.nio.ByteBuffer src_argb0, int src_stride_argb0, java.nio.ByteBuffer src_argb1, int src_stride_argb1, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_argb0.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBBlend(src_argb0, src_stride_argb0, src_argb1, src_stride_argb1, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int ARGBMultiply(java.nio.ByteBuffer src_argb0, int src_stride_argb0, java.nio.ByteBuffer src_argb1, int src_stride_argb1, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_argb0.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBMultiply(src_argb0, src_stride_argb0, src_argb1, src_stride_argb1, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int ARGBAdd(java.nio.ByteBuffer src_argb0, int src_stride_argb0, java.nio.ByteBuffer src_argb1, int src_stride_argb1, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_argb0.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBAdd(src_argb0, src_stride_argb0, src_argb1, src_stride_argb1, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int ARGBSubtract(java.nio.ByteBuffer src_argb0, int src_stride_argb0, java.nio.ByteBuffer src_argb1, int src_stride_argb1, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_argb0.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBSubtract(src_argb0, src_stride_argb0, src_argb1, src_stride_argb1, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int I422ToYUY2(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_frame, int dst_stride_frame, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_frame.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I422ToYUY2(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_frame, dst_stride_frame, width, height);
    }
  }

  public static int I422ToUYVY(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_frame, int dst_stride_frame, int width, int height) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_frame.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I422ToUYVY(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_frame, dst_stride_frame, width, height);
    }
  }

  public static int ARGBAttenuate(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBAttenuate(src_argb, src_stride_argb, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int ARGBUnattenuate(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBUnattenuate(src_argb, src_stride_argb, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int MJPGToARGB(java.nio.ByteBuffer sample, long sample_size, java.nio.ByteBuffer argb, int argb_stride, int w, int h, int dw, int dh) {
  assert sample.isDirect() : "Buffer must be allocated direct.";
  assert argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.MJPGToARGB(sample, sample_size, argb, argb_stride, w, h, dw, dh);
    }
  }

  public static int ARGBComputeCumulativeSum(java.nio.ByteBuffer src_argb, int src_stride_argb, SWIGTYPE_p_int dst_cumsum, int dst_stride32_cumsum, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBComputeCumulativeSum(src_argb, src_stride_argb, SWIGTYPE_p_int.getCPtr(dst_cumsum), dst_stride32_cumsum, width, height);
    }
  }

  public static int ARGBBlur(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb, int dst_stride_argb, SWIGTYPE_p_int dst_cumsum, int dst_stride32_cumsum, int width, int height, int radius) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBBlur(src_argb, src_stride_argb, dst_argb, dst_stride_argb, SWIGTYPE_p_int.getCPtr(dst_cumsum), dst_stride32_cumsum, width, height, radius);
    }
  }

  public static int ARGBShade(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height, long value) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBShade(src_argb, src_stride_argb, dst_argb, dst_stride_argb, width, height, value);
    }
  }

  public static int ARGBInterpolate(java.nio.ByteBuffer src_argb0, int src_stride_argb0, java.nio.ByteBuffer src_argb1, int src_stride_argb1, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height, int interpolation) {
  assert src_argb0.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBInterpolate(src_argb0, src_stride_argb0, src_argb1, src_stride_argb1, dst_argb, dst_stride_argb, width, height, interpolation);
    }
  }

  public static void ARGBAffineRow_C(java.nio.ByteBuffer src_argb, int src_argb_stride, java.nio.ByteBuffer dst_argb, SWIGTYPE_p_float uv_dudv, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAffineRow_C(src_argb, src_argb_stride, dst_argb, SWIGTYPE_p_float.getCPtr(uv_dudv), width);
    }
  }

  public static int ARGBShuffle(java.nio.ByteBuffer src_bgra, int src_stride_bgra, java.nio.ByteBuffer dst_argb, int dst_stride_argb, java.nio.ByteBuffer shuffler, int width, int height) {
  assert src_bgra.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert shuffler.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBShuffle(src_bgra, src_stride_bgra, dst_argb, dst_stride_argb, shuffler, width, height);
    }
  }

  public static int ARGBSobelToPlane(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_y, int dst_stride_y, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBSobelToPlane(src_argb, src_stride_argb, dst_y, dst_stride_y, width, height);
    }
  }

  public static int ARGBSobel(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBSobel(src_argb, src_stride_argb, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int ARGBSobelXY(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int width, int height) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBSobelXY(src_argb, src_stride_argb, dst_argb, dst_stride_argb, width, height);
    }
  }

  public static int I420Rotate(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int src_width, int src_height, RotationModeEnum mode) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420Rotate(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, src_width, src_height, mode.swigValue());
    }
  }

  public static int NV12ToI420Rotate(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_uv, int src_stride_uv, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int src_width, int src_height, RotationModeEnum mode) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.NV12ToI420Rotate(src_y, src_stride_y, src_uv, src_stride_uv, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, src_width, src_height, mode.swigValue());
    }
  }

  public static int RotatePlane(java.nio.ByteBuffer src, int src_stride, java.nio.ByteBuffer dst, int dst_stride, int src_width, int src_height, RotationModeEnum mode) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.RotatePlane(src, src_stride, dst, dst_stride, src_width, src_height, mode.swigValue());
    }
  }

  public static void RotatePlane90(java.nio.ByteBuffer src, int src_stride, java.nio.ByteBuffer dst, int dst_stride, int width, int height) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RotatePlane90(src, src_stride, dst, dst_stride, width, height);
    }
  }

  public static void RotatePlane180(java.nio.ByteBuffer src, int src_stride, java.nio.ByteBuffer dst, int dst_stride, int width, int height) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RotatePlane180(src, src_stride, dst, dst_stride, width, height);
    }
  }

  public static void RotatePlane270(java.nio.ByteBuffer src, int src_stride, java.nio.ByteBuffer dst, int dst_stride, int width, int height) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RotatePlane270(src, src_stride, dst, dst_stride, width, height);
    }
  }

  public static void RotateUV90(java.nio.ByteBuffer src, int src_stride, java.nio.ByteBuffer dst_a, int dst_stride_a, java.nio.ByteBuffer dst_b, int dst_stride_b, int width, int height) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst_a.isDirect() : "Buffer must be allocated direct.";
  assert dst_b.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RotateUV90(src, src_stride, dst_a, dst_stride_a, dst_b, dst_stride_b, width, height);
    }
  }

  public static void RotateUV180(java.nio.ByteBuffer src, int src_stride, java.nio.ByteBuffer dst_a, int dst_stride_a, java.nio.ByteBuffer dst_b, int dst_stride_b, int width, int height) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst_a.isDirect() : "Buffer must be allocated direct.";
  assert dst_b.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RotateUV180(src, src_stride, dst_a, dst_stride_a, dst_b, dst_stride_b, width, height);
    }
  }

  public static void RotateUV270(java.nio.ByteBuffer src, int src_stride, java.nio.ByteBuffer dst_a, int dst_stride_a, java.nio.ByteBuffer dst_b, int dst_stride_b, int width, int height) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst_a.isDirect() : "Buffer must be allocated direct.";
  assert dst_b.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RotateUV270(src, src_stride, dst_a, dst_stride_a, dst_b, dst_stride_b, width, height);
    }
  }

  public static void TransposePlane(java.nio.ByteBuffer src, int src_stride, java.nio.ByteBuffer dst, int dst_stride, int width, int height) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.TransposePlane(src, src_stride, dst, dst_stride, width, height);
    }
  }

  public static void TransposeUV(java.nio.ByteBuffer src, int src_stride, java.nio.ByteBuffer dst_a, int dst_stride_a, java.nio.ByteBuffer dst_b, int dst_stride_b, int width, int height) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst_a.isDirect() : "Buffer must be allocated direct.";
  assert dst_b.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.TransposeUV(src, src_stride, dst_a, dst_stride_a, dst_b, dst_stride_b, width, height);
    }
  }

  public static int ARGBRotate(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int src_width, int src_height, RotationModeEnum mode) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBRotate(src_argb, src_stride_argb, dst_argb, dst_stride_argb, src_width, src_height, mode.swigValue());
    }
  }

  public static void I444ToARGBRow_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I444ToARGBRow_NEON(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToARGBRow_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGBRow_NEON(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I411ToARGBRow_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I411ToARGBRow_NEON(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToBGRARow_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_bgra, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_bgra.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToBGRARow_NEON(src_y, src_u, src_v, dst_bgra, width);
    }
  }

  public static void I422ToABGRRow_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_abgr, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_abgr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToABGRRow_NEON(src_y, src_u, src_v, dst_abgr, width);
    }
  }

  public static void I422ToRGBARow_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_rgba, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgba.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGBARow_NEON(src_y, src_u, src_v, dst_rgba, width);
    }
  }

  public static void I422ToRGB24Row_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_rgb24, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb24.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGB24Row_NEON(src_y, src_u, src_v, dst_rgb24, width);
    }
  }

  public static void I422ToRAWRow_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_raw, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_raw.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRAWRow_NEON(src_y, src_u, src_v, dst_raw, width);
    }
  }

  public static void I422ToRGB565Row_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_rgb565, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb565.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGB565Row_NEON(src_y, src_u, src_v, dst_rgb565, width);
    }
  }

  public static void I422ToARGB1555Row_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb1555, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb1555.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGB1555Row_NEON(src_y, src_u, src_v, dst_argb1555, width);
    }
  }

  public static void I422ToARGB4444Row_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb4444, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb4444.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGB4444Row_NEON(src_y, src_u, src_v, dst_argb4444, width);
    }
  }

  public static void NV12ToARGBRow_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV12ToARGBRow_NEON(src_y, src_uv, dst_argb, width);
    }
  }

  public static void NV21ToARGBRow_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_vu, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_vu.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV21ToARGBRow_NEON(src_y, src_vu, dst_argb, width);
    }
  }

  public static void NV12ToRGB565Row_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_rgb565, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb565.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV12ToRGB565Row_NEON(src_y, src_uv, dst_rgb565, width);
    }
  }

  public static void NV21ToRGB565Row_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_vu, java.nio.ByteBuffer dst_rgb565, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_vu.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb565.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV21ToRGB565Row_NEON(src_y, src_vu, dst_rgb565, width);
    }
  }

  public static void YUY2ToARGBRow_NEON(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_argb, int width) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToARGBRow_NEON(src_yuy2, dst_argb, width);
    }
  }

  public static void UYVYToARGBRow_NEON(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_argb, int width) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToARGBRow_NEON(src_uyvy, dst_argb, width);
    }
  }

  public static void ARGBToYRow_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYRow_AVX2(src_argb, dst_y, pix);
    }
  }

  public static void ARGBToYRow_Any_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYRow_Any_AVX2(src_argb, dst_y, pix);
    }
  }

  public static void ARGBToYRow_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYRow_SSSE3(src_argb, dst_y, pix);
    }
  }

  public static void ARGBToYJRow_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYJRow_AVX2(src_argb, dst_y, pix);
    }
  }

  public static void ARGBToYJRow_Any_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYJRow_Any_AVX2(src_argb, dst_y, pix);
    }
  }

  public static void ARGBToYJRow_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYJRow_SSSE3(src_argb, dst_y, pix);
    }
  }

  public static void BGRAToYRow_SSSE3(java.nio.ByteBuffer src_bgra, java.nio.ByteBuffer dst_y, int pix) {
  assert src_bgra.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.BGRAToYRow_SSSE3(src_bgra, dst_y, pix);
    }
  }

  public static void ABGRToYRow_SSSE3(java.nio.ByteBuffer src_abgr, java.nio.ByteBuffer dst_y, int pix) {
  assert src_abgr.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ABGRToYRow_SSSE3(src_abgr, dst_y, pix);
    }
  }

  public static void RGBAToYRow_SSSE3(java.nio.ByteBuffer src_rgba, java.nio.ByteBuffer dst_y, int pix) {
  assert src_rgba.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGBAToYRow_SSSE3(src_rgba, dst_y, pix);
    }
  }

  public static void RGB24ToYRow_SSSE3(java.nio.ByteBuffer src_rgb24, java.nio.ByteBuffer dst_y, int pix) {
  assert src_rgb24.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB24ToYRow_SSSE3(src_rgb24, dst_y, pix);
    }
  }

  public static void RAWToYRow_SSSE3(java.nio.ByteBuffer src_raw, java.nio.ByteBuffer dst_y, int pix) {
  assert src_raw.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RAWToYRow_SSSE3(src_raw, dst_y, pix);
    }
  }

  public static void ARGBToYRow_Unaligned_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYRow_Unaligned_SSSE3(src_argb, dst_y, pix);
    }
  }

  public static void ARGBToYJRow_Unaligned_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYJRow_Unaligned_SSSE3(src_argb, dst_y, pix);
    }
  }

  public static void BGRAToYRow_Unaligned_SSSE3(java.nio.ByteBuffer src_bgra, java.nio.ByteBuffer dst_y, int pix) {
  assert src_bgra.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.BGRAToYRow_Unaligned_SSSE3(src_bgra, dst_y, pix);
    }
  }

  public static void ABGRToYRow_Unaligned_SSSE3(java.nio.ByteBuffer src_abgr, java.nio.ByteBuffer dst_y, int pix) {
  assert src_abgr.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ABGRToYRow_Unaligned_SSSE3(src_abgr, dst_y, pix);
    }
  }

  public static void RGBAToYRow_Unaligned_SSSE3(java.nio.ByteBuffer src_rgba, java.nio.ByteBuffer dst_y, int pix) {
  assert src_rgba.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGBAToYRow_Unaligned_SSSE3(src_rgba, dst_y, pix);
    }
  }

  public static void RGB24ToYRow_Unaligned_SSSE3(java.nio.ByteBuffer src_rgb24, java.nio.ByteBuffer dst_y, int pix) {
  assert src_rgb24.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB24ToYRow_Unaligned_SSSE3(src_rgb24, dst_y, pix);
    }
  }

  public static void RAWToYRow_Unaligned_SSSE3(java.nio.ByteBuffer src_raw, java.nio.ByteBuffer dst_y, int pix) {
  assert src_raw.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RAWToYRow_Unaligned_SSSE3(src_raw, dst_y, pix);
    }
  }

  public static void ARGBToYRow_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYRow_NEON(src_argb, dst_y, pix);
    }
  }

  public static void ARGBToYJRow_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYJRow_NEON(src_argb, dst_y, pix);
    }
  }

  public static void ARGBToUV444Row_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUV444Row_NEON(src_argb, dst_u, dst_v, pix);
    }
  }

  public static void ARGBToUV422Row_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUV422Row_NEON(src_argb, dst_u, dst_v, pix);
    }
  }

  public static void ARGBToUV411Row_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUV411Row_NEON(src_argb, dst_u, dst_v, pix);
    }
  }

  public static void ARGBToUVRow_NEON(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUVRow_NEON(src_argb, src_stride_argb, dst_u, dst_v, pix);
    }
  }

  public static void ARGBToUVJRow_NEON(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUVJRow_NEON(src_argb, src_stride_argb, dst_u, dst_v, pix);
    }
  }

  public static void BGRAToUVRow_NEON(java.nio.ByteBuffer src_bgra, int src_stride_bgra, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_bgra.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.BGRAToUVRow_NEON(src_bgra, src_stride_bgra, dst_u, dst_v, pix);
    }
  }

  public static void ABGRToUVRow_NEON(java.nio.ByteBuffer src_abgr, int src_stride_abgr, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_abgr.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ABGRToUVRow_NEON(src_abgr, src_stride_abgr, dst_u, dst_v, pix);
    }
  }

  public static void RGBAToUVRow_NEON(java.nio.ByteBuffer src_rgba, int src_stride_rgba, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_rgba.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGBAToUVRow_NEON(src_rgba, src_stride_rgba, dst_u, dst_v, pix);
    }
  }

  public static void RGB24ToUVRow_NEON(java.nio.ByteBuffer src_rgb24, int src_stride_rgb24, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_rgb24.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB24ToUVRow_NEON(src_rgb24, src_stride_rgb24, dst_u, dst_v, pix);
    }
  }

  public static void RAWToUVRow_NEON(java.nio.ByteBuffer src_raw, int src_stride_raw, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_raw.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RAWToUVRow_NEON(src_raw, src_stride_raw, dst_u, dst_v, pix);
    }
  }

  public static void RGB565ToUVRow_NEON(java.nio.ByteBuffer src_rgb565, int src_stride_rgb565, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_rgb565.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB565ToUVRow_NEON(src_rgb565, src_stride_rgb565, dst_u, dst_v, pix);
    }
  }

  public static void ARGB1555ToUVRow_NEON(java.nio.ByteBuffer src_argb1555, int src_stride_argb1555, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_argb1555.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB1555ToUVRow_NEON(src_argb1555, src_stride_argb1555, dst_u, dst_v, pix);
    }
  }

  public static void ARGB4444ToUVRow_NEON(java.nio.ByteBuffer src_argb4444, int src_stride_argb4444, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_argb4444.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB4444ToUVRow_NEON(src_argb4444, src_stride_argb4444, dst_u, dst_v, pix);
    }
  }

  public static void BGRAToYRow_NEON(java.nio.ByteBuffer src_bgra, java.nio.ByteBuffer dst_y, int pix) {
  assert src_bgra.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.BGRAToYRow_NEON(src_bgra, dst_y, pix);
    }
  }

  public static void ABGRToYRow_NEON(java.nio.ByteBuffer src_abgr, java.nio.ByteBuffer dst_y, int pix) {
  assert src_abgr.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ABGRToYRow_NEON(src_abgr, dst_y, pix);
    }
  }

  public static void RGBAToYRow_NEON(java.nio.ByteBuffer src_rgba, java.nio.ByteBuffer dst_y, int pix) {
  assert src_rgba.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGBAToYRow_NEON(src_rgba, dst_y, pix);
    }
  }

  public static void RGB24ToYRow_NEON(java.nio.ByteBuffer src_rgb24, java.nio.ByteBuffer dst_y, int pix) {
  assert src_rgb24.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB24ToYRow_NEON(src_rgb24, dst_y, pix);
    }
  }

  public static void RAWToYRow_NEON(java.nio.ByteBuffer src_raw, java.nio.ByteBuffer dst_y, int pix) {
  assert src_raw.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RAWToYRow_NEON(src_raw, dst_y, pix);
    }
  }

  public static void RGB565ToYRow_NEON(java.nio.ByteBuffer src_rgb565, java.nio.ByteBuffer dst_y, int pix) {
  assert src_rgb565.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB565ToYRow_NEON(src_rgb565, dst_y, pix);
    }
  }

  public static void ARGB1555ToYRow_NEON(java.nio.ByteBuffer src_argb1555, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb1555.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB1555ToYRow_NEON(src_argb1555, dst_y, pix);
    }
  }

  public static void ARGB4444ToYRow_NEON(java.nio.ByteBuffer src_argb4444, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb4444.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB4444ToYRow_NEON(src_argb4444, dst_y, pix);
    }
  }

  public static void ARGBToYRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYRow_C(src_argb, dst_y, pix);
    }
  }

  public static void ARGBToYJRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYJRow_C(src_argb, dst_y, pix);
    }
  }

  public static void BGRAToYRow_C(java.nio.ByteBuffer src_bgra, java.nio.ByteBuffer dst_y, int pix) {
  assert src_bgra.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.BGRAToYRow_C(src_bgra, dst_y, pix);
    }
  }

  public static void ABGRToYRow_C(java.nio.ByteBuffer src_abgr, java.nio.ByteBuffer dst_y, int pix) {
  assert src_abgr.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ABGRToYRow_C(src_abgr, dst_y, pix);
    }
  }

  public static void RGBAToYRow_C(java.nio.ByteBuffer src_rgba, java.nio.ByteBuffer dst_y, int pix) {
  assert src_rgba.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGBAToYRow_C(src_rgba, dst_y, pix);
    }
  }

  public static void RGB24ToYRow_C(java.nio.ByteBuffer src_rgb24, java.nio.ByteBuffer dst_y, int pix) {
  assert src_rgb24.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB24ToYRow_C(src_rgb24, dst_y, pix);
    }
  }

  public static void RAWToYRow_C(java.nio.ByteBuffer src_raw, java.nio.ByteBuffer dst_y, int pix) {
  assert src_raw.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RAWToYRow_C(src_raw, dst_y, pix);
    }
  }

  public static void RGB565ToYRow_C(java.nio.ByteBuffer src_rgb565, java.nio.ByteBuffer dst_y, int pix) {
  assert src_rgb565.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB565ToYRow_C(src_rgb565, dst_y, pix);
    }
  }

  public static void ARGB1555ToYRow_C(java.nio.ByteBuffer src_argb1555, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb1555.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB1555ToYRow_C(src_argb1555, dst_y, pix);
    }
  }

  public static void ARGB4444ToYRow_C(java.nio.ByteBuffer src_argb4444, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb4444.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB4444ToYRow_C(src_argb4444, dst_y, pix);
    }
  }

  public static void ARGBToYRow_Any_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYRow_Any_SSSE3(src_argb, dst_y, pix);
    }
  }

  public static void ARGBToYJRow_Any_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYJRow_Any_SSSE3(src_argb, dst_y, pix);
    }
  }

  public static void BGRAToYRow_Any_SSSE3(java.nio.ByteBuffer src_bgra, java.nio.ByteBuffer dst_y, int pix) {
  assert src_bgra.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.BGRAToYRow_Any_SSSE3(src_bgra, dst_y, pix);
    }
  }

  public static void ABGRToYRow_Any_SSSE3(java.nio.ByteBuffer src_abgr, java.nio.ByteBuffer dst_y, int pix) {
  assert src_abgr.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ABGRToYRow_Any_SSSE3(src_abgr, dst_y, pix);
    }
  }

  public static void RGBAToYRow_Any_SSSE3(java.nio.ByteBuffer src_rgba, java.nio.ByteBuffer dst_y, int pix) {
  assert src_rgba.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGBAToYRow_Any_SSSE3(src_rgba, dst_y, pix);
    }
  }

  public static void RGB24ToYRow_Any_SSSE3(java.nio.ByteBuffer src_rgb24, java.nio.ByteBuffer dst_y, int pix) {
  assert src_rgb24.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB24ToYRow_Any_SSSE3(src_rgb24, dst_y, pix);
    }
  }

  public static void RAWToYRow_Any_SSSE3(java.nio.ByteBuffer src_raw, java.nio.ByteBuffer dst_y, int pix) {
  assert src_raw.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RAWToYRow_Any_SSSE3(src_raw, dst_y, pix);
    }
  }

  public static void ARGBToYRow_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYRow_Any_NEON(src_argb, dst_y, pix);
    }
  }

  public static void ARGBToYJRow_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToYJRow_Any_NEON(src_argb, dst_y, pix);
    }
  }

  public static void BGRAToYRow_Any_NEON(java.nio.ByteBuffer src_bgra, java.nio.ByteBuffer dst_y, int pix) {
  assert src_bgra.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.BGRAToYRow_Any_NEON(src_bgra, dst_y, pix);
    }
  }

  public static void ABGRToYRow_Any_NEON(java.nio.ByteBuffer src_abgr, java.nio.ByteBuffer dst_y, int pix) {
  assert src_abgr.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ABGRToYRow_Any_NEON(src_abgr, dst_y, pix);
    }
  }

  public static void RGBAToYRow_Any_NEON(java.nio.ByteBuffer src_rgba, java.nio.ByteBuffer dst_y, int pix) {
  assert src_rgba.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGBAToYRow_Any_NEON(src_rgba, dst_y, pix);
    }
  }

  public static void RGB24ToYRow_Any_NEON(java.nio.ByteBuffer src_rgb24, java.nio.ByteBuffer dst_y, int pix) {
  assert src_rgb24.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB24ToYRow_Any_NEON(src_rgb24, dst_y, pix);
    }
  }

  public static void RAWToYRow_Any_NEON(java.nio.ByteBuffer src_raw, java.nio.ByteBuffer dst_y, int pix) {
  assert src_raw.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RAWToYRow_Any_NEON(src_raw, dst_y, pix);
    }
  }

  public static void RGB565ToYRow_Any_NEON(java.nio.ByteBuffer src_rgb565, java.nio.ByteBuffer dst_y, int pix) {
  assert src_rgb565.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB565ToYRow_Any_NEON(src_rgb565, dst_y, pix);
    }
  }

  public static void ARGB1555ToYRow_Any_NEON(java.nio.ByteBuffer src_argb1555, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb1555.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB1555ToYRow_Any_NEON(src_argb1555, dst_y, pix);
    }
  }

  public static void ARGB4444ToYRow_Any_NEON(java.nio.ByteBuffer src_argb4444, java.nio.ByteBuffer dst_y, int pix) {
  assert src_argb4444.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB4444ToYRow_Any_NEON(src_argb4444, dst_y, pix);
    }
  }

  public static void ARGBToUVRow_AVX2(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUVRow_AVX2(src_argb, src_stride_argb, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUVRow_Any_AVX2(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUVRow_Any_AVX2(src_argb, src_stride_argb, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUVRow_SSSE3(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUVRow_SSSE3(src_argb, src_stride_argb, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUVJRow_SSSE3(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUVJRow_SSSE3(src_argb, src_stride_argb, dst_u, dst_v, width);
    }
  }

  public static void BGRAToUVRow_SSSE3(java.nio.ByteBuffer src_bgra, int src_stride_bgra, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_bgra.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.BGRAToUVRow_SSSE3(src_bgra, src_stride_bgra, dst_u, dst_v, width);
    }
  }

  public static void ABGRToUVRow_SSSE3(java.nio.ByteBuffer src_abgr, int src_stride_abgr, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_abgr.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ABGRToUVRow_SSSE3(src_abgr, src_stride_abgr, dst_u, dst_v, width);
    }
  }

  public static void RGBAToUVRow_SSSE3(java.nio.ByteBuffer src_rgba, int src_stride_rgba, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_rgba.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGBAToUVRow_SSSE3(src_rgba, src_stride_rgba, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUVRow_Unaligned_SSSE3(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUVRow_Unaligned_SSSE3(src_argb, src_stride_argb, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUVJRow_Unaligned_SSSE3(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUVJRow_Unaligned_SSSE3(src_argb, src_stride_argb, dst_u, dst_v, width);
    }
  }

  public static void BGRAToUVRow_Unaligned_SSSE3(java.nio.ByteBuffer src_bgra, int src_stride_bgra, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_bgra.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.BGRAToUVRow_Unaligned_SSSE3(src_bgra, src_stride_bgra, dst_u, dst_v, width);
    }
  }

  public static void ABGRToUVRow_Unaligned_SSSE3(java.nio.ByteBuffer src_abgr, int src_stride_abgr, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_abgr.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ABGRToUVRow_Unaligned_SSSE3(src_abgr, src_stride_abgr, dst_u, dst_v, width);
    }
  }

  public static void RGBAToUVRow_Unaligned_SSSE3(java.nio.ByteBuffer src_rgba, int src_stride_rgba, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_rgba.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGBAToUVRow_Unaligned_SSSE3(src_rgba, src_stride_rgba, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUVRow_Any_SSSE3(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUVRow_Any_SSSE3(src_argb, src_stride_argb, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUVJRow_Any_SSSE3(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUVJRow_Any_SSSE3(src_argb, src_stride_argb, dst_u, dst_v, width);
    }
  }

  public static void BGRAToUVRow_Any_SSSE3(java.nio.ByteBuffer src_bgra, int src_stride_bgra, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_bgra.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.BGRAToUVRow_Any_SSSE3(src_bgra, src_stride_bgra, dst_u, dst_v, width);
    }
  }

  public static void ABGRToUVRow_Any_SSSE3(java.nio.ByteBuffer src_abgr, int src_stride_abgr, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_abgr.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ABGRToUVRow_Any_SSSE3(src_abgr, src_stride_abgr, dst_u, dst_v, width);
    }
  }

  public static void RGBAToUVRow_Any_SSSE3(java.nio.ByteBuffer src_rgba, int src_stride_rgba, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_rgba.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGBAToUVRow_Any_SSSE3(src_rgba, src_stride_rgba, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUV444Row_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUV444Row_Any_NEON(src_argb, dst_u, dst_v, pix);
    }
  }

  public static void ARGBToUV422Row_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUV422Row_Any_NEON(src_argb, dst_u, dst_v, pix);
    }
  }

  public static void ARGBToUV411Row_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUV411Row_Any_NEON(src_argb, dst_u, dst_v, pix);
    }
  }

  public static void ARGBToUVRow_Any_NEON(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUVRow_Any_NEON(src_argb, src_stride_argb, dst_u, dst_v, pix);
    }
  }

  public static void ARGBToUVJRow_Any_NEON(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUVJRow_Any_NEON(src_argb, src_stride_argb, dst_u, dst_v, pix);
    }
  }

  public static void BGRAToUVRow_Any_NEON(java.nio.ByteBuffer src_bgra, int src_stride_bgra, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_bgra.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.BGRAToUVRow_Any_NEON(src_bgra, src_stride_bgra, dst_u, dst_v, pix);
    }
  }

  public static void ABGRToUVRow_Any_NEON(java.nio.ByteBuffer src_abgr, int src_stride_abgr, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_abgr.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ABGRToUVRow_Any_NEON(src_abgr, src_stride_abgr, dst_u, dst_v, pix);
    }
  }

  public static void RGBAToUVRow_Any_NEON(java.nio.ByteBuffer src_rgba, int src_stride_rgba, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_rgba.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGBAToUVRow_Any_NEON(src_rgba, src_stride_rgba, dst_u, dst_v, pix);
    }
  }

  public static void RGB24ToUVRow_Any_NEON(java.nio.ByteBuffer src_rgb24, int src_stride_rgb24, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_rgb24.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB24ToUVRow_Any_NEON(src_rgb24, src_stride_rgb24, dst_u, dst_v, pix);
    }
  }

  public static void RAWToUVRow_Any_NEON(java.nio.ByteBuffer src_raw, int src_stride_raw, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_raw.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RAWToUVRow_Any_NEON(src_raw, src_stride_raw, dst_u, dst_v, pix);
    }
  }

  public static void RGB565ToUVRow_Any_NEON(java.nio.ByteBuffer src_rgb565, int src_stride_rgb565, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_rgb565.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB565ToUVRow_Any_NEON(src_rgb565, src_stride_rgb565, dst_u, dst_v, pix);
    }
  }

  public static void ARGB1555ToUVRow_Any_NEON(java.nio.ByteBuffer src_argb1555, int src_stride_argb1555, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_argb1555.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB1555ToUVRow_Any_NEON(src_argb1555, src_stride_argb1555, dst_u, dst_v, pix);
    }
  }

  public static void ARGB4444ToUVRow_Any_NEON(java.nio.ByteBuffer src_argb4444, int src_stride_argb4444, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_argb4444.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB4444ToUVRow_Any_NEON(src_argb4444, src_stride_argb4444, dst_u, dst_v, pix);
    }
  }

  public static void ARGBToUVRow_C(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUVRow_C(src_argb, src_stride_argb, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUVJRow_C(java.nio.ByteBuffer src_argb, int src_stride_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUVJRow_C(src_argb, src_stride_argb, dst_u, dst_v, width);
    }
  }

  public static void BGRAToUVRow_C(java.nio.ByteBuffer src_bgra, int src_stride_bgra, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_bgra.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.BGRAToUVRow_C(src_bgra, src_stride_bgra, dst_u, dst_v, width);
    }
  }

  public static void ABGRToUVRow_C(java.nio.ByteBuffer src_abgr, int src_stride_abgr, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_abgr.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ABGRToUVRow_C(src_abgr, src_stride_abgr, dst_u, dst_v, width);
    }
  }

  public static void RGBAToUVRow_C(java.nio.ByteBuffer src_rgba, int src_stride_rgba, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_rgba.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGBAToUVRow_C(src_rgba, src_stride_rgba, dst_u, dst_v, width);
    }
  }

  public static void RGB24ToUVRow_C(java.nio.ByteBuffer src_rgb24, int src_stride_rgb24, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_rgb24.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB24ToUVRow_C(src_rgb24, src_stride_rgb24, dst_u, dst_v, width);
    }
  }

  public static void RAWToUVRow_C(java.nio.ByteBuffer src_raw, int src_stride_raw, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_raw.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RAWToUVRow_C(src_raw, src_stride_raw, dst_u, dst_v, width);
    }
  }

  public static void RGB565ToUVRow_C(java.nio.ByteBuffer src_rgb565, int src_stride_rgb565, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_rgb565.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB565ToUVRow_C(src_rgb565, src_stride_rgb565, dst_u, dst_v, width);
    }
  }

  public static void ARGB1555ToUVRow_C(java.nio.ByteBuffer src_argb1555, int src_stride_argb1555, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb1555.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB1555ToUVRow_C(src_argb1555, src_stride_argb1555, dst_u, dst_v, width);
    }
  }

  public static void ARGB4444ToUVRow_C(java.nio.ByteBuffer src_argb4444, int src_stride_argb4444, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb4444.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB4444ToUVRow_C(src_argb4444, src_stride_argb4444, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUV444Row_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUV444Row_SSSE3(src_argb, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUV444Row_Unaligned_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUV444Row_Unaligned_SSSE3(src_argb, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUV444Row_Any_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUV444Row_Any_SSSE3(src_argb, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUV422Row_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUV422Row_SSSE3(src_argb, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUV422Row_Unaligned_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUV422Row_Unaligned_SSSE3(src_argb, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUV422Row_Any_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUV422Row_Any_SSSE3(src_argb, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUV444Row_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUV444Row_C(src_argb, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUV422Row_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUV422Row_C(src_argb, dst_u, dst_v, width);
    }
  }

  public static void ARGBToUV411Row_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToUV411Row_C(src_argb, dst_u, dst_v, width);
    }
  }

  public static void MirrorRow_AVX2(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int width) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MirrorRow_AVX2(src, dst, width);
    }
  }

  public static void MirrorRow_SSSE3(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int width) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MirrorRow_SSSE3(src, dst, width);
    }
  }

  public static void MirrorRow_SSE2(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int width) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MirrorRow_SSE2(src, dst, width);
    }
  }

  public static void MirrorRow_NEON(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int width) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MirrorRow_NEON(src, dst, width);
    }
  }

  public static void MirrorRow_MIPS_DSPR2(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int width) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MirrorRow_MIPS_DSPR2(src, dst, width);
    }
  }

  public static void MirrorRow_C(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int width) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MirrorRow_C(src, dst, width);
    }
  }

  public static void MirrorUVRow_SSSE3(java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MirrorUVRow_SSSE3(src_uv, dst_u, dst_v, width);
    }
  }

  public static void MirrorUVRow_NEON(java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MirrorUVRow_NEON(src_uv, dst_u, dst_v, width);
    }
  }

  public static void MirrorUVRow_MIPS_DSPR2(java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MirrorUVRow_MIPS_DSPR2(src_uv, dst_u, dst_v, width);
    }
  }

  public static void MirrorUVRow_C(java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int width) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MirrorUVRow_C(src_uv, dst_u, dst_v, width);
    }
  }

  public static void ARGBMirrorRow_AVX2(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int width) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBMirrorRow_AVX2(src, dst, width);
    }
  }

  public static void ARGBMirrorRow_SSSE3(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int width) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBMirrorRow_SSSE3(src, dst, width);
    }
  }

  public static void ARGBMirrorRow_NEON(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int width) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBMirrorRow_NEON(src, dst, width);
    }
  }

  public static void ARGBMirrorRow_C(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int width) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBMirrorRow_C(src, dst, width);
    }
  }

  public static void SplitUVRow_C(java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SplitUVRow_C(src_uv, dst_u, dst_v, pix);
    }
  }

  public static void SplitUVRow_SSE2(java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SplitUVRow_SSE2(src_uv, dst_u, dst_v, pix);
    }
  }

  public static void SplitUVRow_AVX2(java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SplitUVRow_AVX2(src_uv, dst_u, dst_v, pix);
    }
  }

  public static void SplitUVRow_NEON(java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SplitUVRow_NEON(src_uv, dst_u, dst_v, pix);
    }
  }

  public static void SplitUVRow_MIPS_DSPR2(java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SplitUVRow_MIPS_DSPR2(src_uv, dst_u, dst_v, pix);
    }
  }

  public static void SplitUVRow_Unaligned_SSE2(java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SplitUVRow_Unaligned_SSE2(src_uv, dst_u, dst_v, pix);
    }
  }

  public static void SplitUVRow_Unaligned_MIPS_DSPR2(java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SplitUVRow_Unaligned_MIPS_DSPR2(src_uv, dst_u, dst_v, pix);
    }
  }

  public static void SplitUVRow_Any_SSE2(java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SplitUVRow_Any_SSE2(src_uv, dst_u, dst_v, pix);
    }
  }

  public static void SplitUVRow_Any_AVX2(java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SplitUVRow_Any_AVX2(src_uv, dst_u, dst_v, pix);
    }
  }

  public static void SplitUVRow_Any_NEON(java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SplitUVRow_Any_NEON(src_uv, dst_u, dst_v, pix);
    }
  }

  public static void SplitUVRow_Any_MIPS_DSPR2(java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SplitUVRow_Any_MIPS_DSPR2(src_uv, dst_u, dst_v, pix);
    }
  }

  public static void MergeUVRow_C(java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_uv, int width) {
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_uv.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MergeUVRow_C(src_u, src_v, dst_uv, width);
    }
  }

  public static void MergeUVRow_SSE2(java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_uv, int width) {
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_uv.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MergeUVRow_SSE2(src_u, src_v, dst_uv, width);
    }
  }

  public static void MergeUVRow_AVX2(java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_uv, int width) {
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_uv.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MergeUVRow_AVX2(src_u, src_v, dst_uv, width);
    }
  }

  public static void MergeUVRow_NEON(java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_uv, int width) {
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_uv.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MergeUVRow_NEON(src_u, src_v, dst_uv, width);
    }
  }

  public static void MergeUVRow_Unaligned_SSE2(java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_uv, int width) {
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_uv.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MergeUVRow_Unaligned_SSE2(src_u, src_v, dst_uv, width);
    }
  }

  public static void MergeUVRow_Any_SSE2(java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_uv, int width) {
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_uv.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MergeUVRow_Any_SSE2(src_u, src_v, dst_uv, width);
    }
  }

  public static void MergeUVRow_Any_AVX2(java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_uv, int width) {
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_uv.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MergeUVRow_Any_AVX2(src_u, src_v, dst_uv, width);
    }
  }

  public static void MergeUVRow_Any_NEON(java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_uv, int width) {
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_uv.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.MergeUVRow_Any_NEON(src_u, src_v, dst_uv, width);
    }
  }

  public static void CopyRow_SSE2(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int count) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.CopyRow_SSE2(src, dst, count);
    }
  }

  public static void CopyRow_ERMS(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int count) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.CopyRow_ERMS(src, dst, count);
    }
  }

  public static void CopyRow_X86(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int count) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.CopyRow_X86(src, dst, count);
    }
  }

  public static void CopyRow_NEON(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int count) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.CopyRow_NEON(src, dst, count);
    }
  }

  public static void CopyRow_MIPS(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int count) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.CopyRow_MIPS(src, dst, count);
    }
  }

  public static void CopyRow_C(java.nio.ByteBuffer src, java.nio.ByteBuffer dst, int count) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.CopyRow_C(src, dst, count);
    }
  }

  public static void CopyRow_16_C(SWIGTYPE_p_unsigned_short src, SWIGTYPE_p_unsigned_short dst, int count) {
    libyuvJNI.CopyRow_16_C(SWIGTYPE_p_unsigned_short.getCPtr(src), SWIGTYPE_p_unsigned_short.getCPtr(dst), count);
  }

  public static void ARGBCopyAlphaRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBCopyAlphaRow_C(src_argb, dst_argb, width);
    }
  }

  public static void ARGBCopyAlphaRow_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBCopyAlphaRow_SSE2(src_argb, dst_argb, width);
    }
  }

  public static void ARGBCopyAlphaRow_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBCopyAlphaRow_AVX2(src_argb, dst_argb, width);
    }
  }

  public static void ARGBCopyYToAlphaRow_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBCopyYToAlphaRow_C(src_y, dst_argb, width);
    }
  }

  public static void ARGBCopyYToAlphaRow_SSE2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBCopyYToAlphaRow_SSE2(src_y, dst_argb, width);
    }
  }

  public static void ARGBCopyYToAlphaRow_AVX2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBCopyYToAlphaRow_AVX2(src_y, dst_argb, width);
    }
  }

  public static void SetRow_X86(java.nio.ByteBuffer dst, long v32, int count) {
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SetRow_X86(dst, v32, count);
    }
  }

  public static void ARGBSetRows_X86(java.nio.ByteBuffer dst, long v32, int width, int dst_stride, int height) {
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBSetRows_X86(dst, v32, width, dst_stride, height);
    }
  }

  public static void SetRow_NEON(java.nio.ByteBuffer dst, long v32, int count) {
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SetRow_NEON(dst, v32, count);
    }
  }

  public static void ARGBSetRows_NEON(java.nio.ByteBuffer dst, long v32, int width, int dst_stride, int height) {
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBSetRows_NEON(dst, v32, width, dst_stride, height);
    }
  }

  public static void SetRow_C(java.nio.ByteBuffer dst, long v32, int count) {
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SetRow_C(dst, v32, count);
    }
  }

  public static void ARGBSetRows_C(java.nio.ByteBuffer dst, long v32, int width, int dst_stride, int height) {
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBSetRows_C(dst, v32, width, dst_stride, height);
    }
  }

  public static void ARGBShuffleRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer shuffler, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert shuffler.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBShuffleRow_C(src_argb, dst_argb, shuffler, pix);
    }
  }

  public static void ARGBShuffleRow_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer shuffler, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert shuffler.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBShuffleRow_SSE2(src_argb, dst_argb, shuffler, pix);
    }
  }

  public static void ARGBShuffleRow_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer shuffler, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert shuffler.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBShuffleRow_SSSE3(src_argb, dst_argb, shuffler, pix);
    }
  }

  public static void ARGBShuffleRow_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer shuffler, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert shuffler.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBShuffleRow_AVX2(src_argb, dst_argb, shuffler, pix);
    }
  }

  public static void ARGBShuffleRow_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer shuffler, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert shuffler.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBShuffleRow_NEON(src_argb, dst_argb, shuffler, pix);
    }
  }

  public static void ARGBShuffleRow_Unaligned_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer shuffler, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert shuffler.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBShuffleRow_Unaligned_SSSE3(src_argb, dst_argb, shuffler, pix);
    }
  }

  public static void ARGBShuffleRow_Any_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer shuffler, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert shuffler.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBShuffleRow_Any_SSE2(src_argb, dst_argb, shuffler, pix);
    }
  }

  public static void ARGBShuffleRow_Any_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer shuffler, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert shuffler.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBShuffleRow_Any_SSSE3(src_argb, dst_argb, shuffler, pix);
    }
  }

  public static void ARGBShuffleRow_Any_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer shuffler, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert shuffler.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBShuffleRow_Any_AVX2(src_argb, dst_argb, shuffler, pix);
    }
  }

  public static void ARGBShuffleRow_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer shuffler, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert shuffler.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBShuffleRow_Any_NEON(src_argb, dst_argb, shuffler, pix);
    }
  }

  public static void RGB24ToARGBRow_SSSE3(java.nio.ByteBuffer src_rgb24, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_rgb24.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB24ToARGBRow_SSSE3(src_rgb24, dst_argb, pix);
    }
  }

  public static void RAWToARGBRow_SSSE3(java.nio.ByteBuffer src_raw, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_raw.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RAWToARGBRow_SSSE3(src_raw, dst_argb, pix);
    }
  }

  public static void RGB565ToARGBRow_SSE2(java.nio.ByteBuffer src_rgb565, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_rgb565.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB565ToARGBRow_SSE2(src_rgb565, dst_argb, pix);
    }
  }

  public static void ARGB1555ToARGBRow_SSE2(java.nio.ByteBuffer src_argb1555, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_argb1555.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB1555ToARGBRow_SSE2(src_argb1555, dst_argb, pix);
    }
  }

  public static void ARGB4444ToARGBRow_SSE2(java.nio.ByteBuffer src_argb4444, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_argb4444.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB4444ToARGBRow_SSE2(src_argb4444, dst_argb, pix);
    }
  }

  public static void RGB24ToARGBRow_NEON(java.nio.ByteBuffer src_rgb24, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_rgb24.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB24ToARGBRow_NEON(src_rgb24, dst_argb, pix);
    }
  }

  public static void RAWToARGBRow_NEON(java.nio.ByteBuffer src_raw, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_raw.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RAWToARGBRow_NEON(src_raw, dst_argb, pix);
    }
  }

  public static void RGB565ToARGBRow_NEON(java.nio.ByteBuffer src_rgb565, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_rgb565.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB565ToARGBRow_NEON(src_rgb565, dst_argb, pix);
    }
  }

  public static void ARGB1555ToARGBRow_NEON(java.nio.ByteBuffer src_argb1555, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_argb1555.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB1555ToARGBRow_NEON(src_argb1555, dst_argb, pix);
    }
  }

  public static void ARGB4444ToARGBRow_NEON(java.nio.ByteBuffer src_argb4444, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_argb4444.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB4444ToARGBRow_NEON(src_argb4444, dst_argb, pix);
    }
  }

  public static void RGB24ToARGBRow_C(java.nio.ByteBuffer src_rgb24, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_rgb24.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB24ToARGBRow_C(src_rgb24, dst_argb, pix);
    }
  }

  public static void RAWToARGBRow_C(java.nio.ByteBuffer src_raw, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_raw.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RAWToARGBRow_C(src_raw, dst_argb, pix);
    }
  }

  public static void RGB565ToARGBRow_C(java.nio.ByteBuffer src_rgb, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_rgb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB565ToARGBRow_C(src_rgb, dst_argb, pix);
    }
  }

  public static void ARGB1555ToARGBRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB1555ToARGBRow_C(src_argb, dst_argb, pix);
    }
  }

  public static void ARGB4444ToARGBRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB4444ToARGBRow_C(src_argb, dst_argb, pix);
    }
  }

  public static void RGB24ToARGBRow_Any_SSSE3(java.nio.ByteBuffer src_rgb24, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_rgb24.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB24ToARGBRow_Any_SSSE3(src_rgb24, dst_argb, pix);
    }
  }

  public static void RAWToARGBRow_Any_SSSE3(java.nio.ByteBuffer src_raw, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_raw.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RAWToARGBRow_Any_SSSE3(src_raw, dst_argb, pix);
    }
  }

  public static void RGB565ToARGBRow_Any_SSE2(java.nio.ByteBuffer src_rgb565, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_rgb565.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB565ToARGBRow_Any_SSE2(src_rgb565, dst_argb, pix);
    }
  }

  public static void ARGB1555ToARGBRow_Any_SSE2(java.nio.ByteBuffer src_argb1555, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_argb1555.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB1555ToARGBRow_Any_SSE2(src_argb1555, dst_argb, pix);
    }
  }

  public static void ARGB4444ToARGBRow_Any_SSE2(java.nio.ByteBuffer src_argb4444, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_argb4444.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB4444ToARGBRow_Any_SSE2(src_argb4444, dst_argb, pix);
    }
  }

  public static void RGB24ToARGBRow_Any_NEON(java.nio.ByteBuffer src_rgb24, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_rgb24.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB24ToARGBRow_Any_NEON(src_rgb24, dst_argb, pix);
    }
  }

  public static void RAWToARGBRow_Any_NEON(java.nio.ByteBuffer src_raw, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_raw.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RAWToARGBRow_Any_NEON(src_raw, dst_argb, pix);
    }
  }

  public static void RGB565ToARGBRow_Any_NEON(java.nio.ByteBuffer src_rgb565, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_rgb565.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGB565ToARGBRow_Any_NEON(src_rgb565, dst_argb, pix);
    }
  }

  public static void ARGB1555ToARGBRow_Any_NEON(java.nio.ByteBuffer src_argb1555, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_argb1555.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB1555ToARGBRow_Any_NEON(src_argb1555, dst_argb, pix);
    }
  }

  public static void ARGB4444ToARGBRow_Any_NEON(java.nio.ByteBuffer src_argb4444, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_argb4444.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGB4444ToARGBRow_Any_NEON(src_argb4444, dst_argb, pix);
    }
  }

  public static void ARGBToRGB24Row_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRGB24Row_SSSE3(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToRAWRow_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRAWRow_SSSE3(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToRGB565Row_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRGB565Row_SSE2(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToARGB1555Row_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToARGB1555Row_SSE2(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToARGB4444Row_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToARGB4444Row_SSE2(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToRGB24Row_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRGB24Row_NEON(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToRAWRow_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRAWRow_NEON(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToRGB565Row_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRGB565Row_NEON(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToARGB1555Row_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToARGB1555Row_NEON(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToARGB4444Row_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToARGB4444Row_NEON(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToRGBARow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRGBARow_C(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToRGB24Row_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRGB24Row_C(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToRAWRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRAWRow_C(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToRGB565Row_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRGB565Row_C(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToARGB1555Row_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToARGB1555Row_C(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToARGB4444Row_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToARGB4444Row_C(src_argb, dst_rgb, pix);
    }
  }

  public static void I400ToARGBRow_SSE2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I400ToARGBRow_SSE2(src_y, dst_argb, pix);
    }
  }

  public static void I400ToARGBRow_Unaligned_SSE2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I400ToARGBRow_Unaligned_SSE2(src_y, dst_argb, pix);
    }
  }

  public static void I400ToARGBRow_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I400ToARGBRow_NEON(src_y, dst_argb, pix);
    }
  }

  public static void I400ToARGBRow_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I400ToARGBRow_C(src_y, dst_argb, pix);
    }
  }

  public static void I400ToARGBRow_Any_SSE2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I400ToARGBRow_Any_SSE2(src_y, dst_argb, pix);
    }
  }

  public static void I400ToARGBRow_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer dst_argb, int pix) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I400ToARGBRow_Any_NEON(src_y, dst_argb, pix);
    }
  }

  public static void I444ToARGBRow_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I444ToARGBRow_C(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToARGBRow_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGBRow_C(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I411ToARGBRow_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I411ToARGBRow_C(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void NV12ToARGBRow_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV12ToARGBRow_C(src_y, src_uv, dst_argb, width);
    }
  }

  public static void NV21ToRGB565Row_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_vu, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_vu.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV21ToRGB565Row_C(src_y, src_vu, dst_argb, width);
    }
  }

  public static void NV12ToRGB565Row_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV12ToRGB565Row_C(src_y, src_uv, dst_argb, width);
    }
  }

  public static void NV21ToARGBRow_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_vu, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_vu.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV21ToARGBRow_C(src_y, src_vu, dst_argb, width);
    }
  }

  public static void YUY2ToARGBRow_C(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_argb, int width) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToARGBRow_C(src_yuy2, dst_argb, width);
    }
  }

  public static void UYVYToARGBRow_C(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_argb, int width) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToARGBRow_C(src_uyvy, dst_argb, width);
    }
  }

  public static void I422ToBGRARow_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_bgra, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_bgra.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToBGRARow_C(src_y, src_u, src_v, dst_bgra, width);
    }
  }

  public static void I422ToABGRRow_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_abgr, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_abgr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToABGRRow_C(src_y, src_u, src_v, dst_abgr, width);
    }
  }

  public static void I422ToRGBARow_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_rgba, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgba.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGBARow_C(src_y, src_u, src_v, dst_rgba, width);
    }
  }

  public static void I422ToRGB24Row_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_rgb24, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb24.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGB24Row_C(src_y, src_u, src_v, dst_rgb24, width);
    }
  }

  public static void I422ToRAWRow_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_raw, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_raw.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRAWRow_C(src_y, src_u, src_v, dst_raw, width);
    }
  }

  public static void I422ToARGB4444Row_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb4444, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb4444.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGB4444Row_C(src_y, src_u, src_v, dst_argb4444, width);
    }
  }

  public static void I422ToARGB1555Row_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb4444, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb4444.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGB1555Row_C(src_y, src_u, src_v, dst_argb4444, width);
    }
  }

  public static void I422ToRGB565Row_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_rgb565, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb565.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGB565Row_C(src_y, src_u, src_v, dst_rgb565, width);
    }
  }

  public static void YToARGBRow_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YToARGBRow_C(src_y, dst_argb, width);
    }
  }

  public static void I422ToARGBRow_AVX2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGBRow_AVX2(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I444ToARGBRow_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I444ToARGBRow_SSSE3(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToARGBRow_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGBRow_SSSE3(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I411ToARGBRow_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I411ToARGBRow_SSSE3(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void NV12ToARGBRow_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV12ToARGBRow_SSSE3(src_y, src_uv, dst_argb, width);
    }
  }

  public static void NV21ToARGBRow_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_vu, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_vu.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV21ToARGBRow_SSSE3(src_y, src_vu, dst_argb, width);
    }
  }

  public static void NV12ToRGB565Row_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV12ToRGB565Row_SSSE3(src_y, src_uv, dst_argb, width);
    }
  }

  public static void NV21ToRGB565Row_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_vu, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_vu.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV21ToRGB565Row_SSSE3(src_y, src_vu, dst_argb, width);
    }
  }

  public static void YUY2ToARGBRow_SSSE3(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_argb, int width) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToARGBRow_SSSE3(src_yuy2, dst_argb, width);
    }
  }

  public static void UYVYToARGBRow_SSSE3(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_argb, int width) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToARGBRow_SSSE3(src_uyvy, dst_argb, width);
    }
  }

  public static void I422ToBGRARow_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_bgra, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_bgra.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToBGRARow_SSSE3(src_y, src_u, src_v, dst_bgra, width);
    }
  }

  public static void I422ToABGRRow_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_abgr, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_abgr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToABGRRow_SSSE3(src_y, src_u, src_v, dst_abgr, width);
    }
  }

  public static void I422ToRGBARow_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_rgba, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgba.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGBARow_SSSE3(src_y, src_u, src_v, dst_rgba, width);
    }
  }

  public static void I422ToARGB4444Row_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGB4444Row_SSSE3(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToARGB1555Row_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGB1555Row_SSSE3(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToRGB565Row_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGB565Row_SSSE3(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToRGB24Row_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_rgb24, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb24.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGB24Row_SSSE3(src_y, src_u, src_v, dst_rgb24, width);
    }
  }

  public static void I422ToRAWRow_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_raw, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_raw.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRAWRow_SSSE3(src_y, src_u, src_v, dst_raw, width);
    }
  }

  public static void I444ToARGBRow_Unaligned_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I444ToARGBRow_Unaligned_SSSE3(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToARGBRow_Unaligned_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGBRow_Unaligned_SSSE3(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I411ToARGBRow_Unaligned_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I411ToARGBRow_Unaligned_SSSE3(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void NV12ToARGBRow_Unaligned_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV12ToARGBRow_Unaligned_SSSE3(src_y, src_uv, dst_argb, width);
    }
  }

  public static void NV21ToARGBRow_Unaligned_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_vu, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_vu.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV21ToARGBRow_Unaligned_SSSE3(src_y, src_vu, dst_argb, width);
    }
  }

  public static void YUY2ToARGBRow_Unaligned_SSSE3(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_argb, int width) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToARGBRow_Unaligned_SSSE3(src_yuy2, dst_argb, width);
    }
  }

  public static void UYVYToARGBRow_Unaligned_SSSE3(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_argb, int width) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToARGBRow_Unaligned_SSSE3(src_uyvy, dst_argb, width);
    }
  }

  public static void I422ToBGRARow_Unaligned_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_bgra, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_bgra.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToBGRARow_Unaligned_SSSE3(src_y, src_u, src_v, dst_bgra, width);
    }
  }

  public static void I422ToABGRRow_Unaligned_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_abgr, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_abgr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToABGRRow_Unaligned_SSSE3(src_y, src_u, src_v, dst_abgr, width);
    }
  }

  public static void I422ToRGBARow_Unaligned_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_rgba, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgba.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGBARow_Unaligned_SSSE3(src_y, src_u, src_v, dst_rgba, width);
    }
  }

  public static void I422ToARGBRow_Any_AVX2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGBRow_Any_AVX2(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I444ToARGBRow_Any_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I444ToARGBRow_Any_SSSE3(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToARGBRow_Any_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGBRow_Any_SSSE3(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I411ToARGBRow_Any_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I411ToARGBRow_Any_SSSE3(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void NV12ToARGBRow_Any_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV12ToARGBRow_Any_SSSE3(src_y, src_uv, dst_argb, width);
    }
  }

  public static void NV21ToARGBRow_Any_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_vu, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_vu.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV21ToARGBRow_Any_SSSE3(src_y, src_vu, dst_argb, width);
    }
  }

  public static void NV12ToRGB565Row_Any_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV12ToRGB565Row_Any_SSSE3(src_y, src_uv, dst_argb, width);
    }
  }

  public static void NV21ToRGB565Row_Any_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_vu, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_vu.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV21ToRGB565Row_Any_SSSE3(src_y, src_vu, dst_argb, width);
    }
  }

  public static void YUY2ToARGBRow_Any_SSSE3(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_argb, int width) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToARGBRow_Any_SSSE3(src_yuy2, dst_argb, width);
    }
  }

  public static void UYVYToARGBRow_Any_SSSE3(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_argb, int width) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToARGBRow_Any_SSSE3(src_uyvy, dst_argb, width);
    }
  }

  public static void I422ToBGRARow_Any_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_bgra, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_bgra.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToBGRARow_Any_SSSE3(src_y, src_u, src_v, dst_bgra, width);
    }
  }

  public static void I422ToABGRRow_Any_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_abgr, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_abgr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToABGRRow_Any_SSSE3(src_y, src_u, src_v, dst_abgr, width);
    }
  }

  public static void I422ToRGBARow_Any_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_rgba, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgba.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGBARow_Any_SSSE3(src_y, src_u, src_v, dst_rgba, width);
    }
  }

  public static void I422ToARGB4444Row_Any_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_rgba, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgba.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGB4444Row_Any_SSSE3(src_y, src_u, src_v, dst_rgba, width);
    }
  }

  public static void I422ToARGB1555Row_Any_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_rgba, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgba.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGB1555Row_Any_SSSE3(src_y, src_u, src_v, dst_rgba, width);
    }
  }

  public static void I422ToRGB565Row_Any_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_rgba, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgba.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGB565Row_Any_SSSE3(src_y, src_u, src_v, dst_rgba, width);
    }
  }

  public static void I422ToRGB24Row_Any_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGB24Row_Any_SSSE3(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToRAWRow_Any_SSSE3(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRAWRow_Any_SSSE3(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void YToARGBRow_SSE2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YToARGBRow_SSE2(src_y, dst_argb, width);
    }
  }

  public static void YToARGBRow_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YToARGBRow_NEON(src_y, dst_argb, width);
    }
  }

  public static void YToARGBRow_Any_SSE2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YToARGBRow_Any_SSE2(src_y, dst_argb, width);
    }
  }

  public static void YToARGBRow_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YToARGBRow_Any_NEON(src_y, dst_argb, width);
    }
  }

  public static void ARGBBlendRow_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBBlendRow_SSSE3(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBBlendRow_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBBlendRow_SSE2(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBBlendRow_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBBlendRow_NEON(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBBlendRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBBlendRow_C(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBMultiplyRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBMultiplyRow_C(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBMultiplyRow_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBMultiplyRow_SSE2(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBMultiplyRow_Any_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBMultiplyRow_Any_SSE2(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBMultiplyRow_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBMultiplyRow_AVX2(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBMultiplyRow_Any_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBMultiplyRow_Any_AVX2(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBMultiplyRow_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBMultiplyRow_NEON(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBMultiplyRow_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBMultiplyRow_Any_NEON(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBAddRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAddRow_C(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBAddRow_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAddRow_SSE2(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBAddRow_Any_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAddRow_Any_SSE2(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBAddRow_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAddRow_AVX2(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBAddRow_Any_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAddRow_Any_AVX2(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBAddRow_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAddRow_NEON(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBAddRow_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAddRow_Any_NEON(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBSubtractRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBSubtractRow_C(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBSubtractRow_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBSubtractRow_SSE2(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBSubtractRow_Any_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBSubtractRow_Any_SSE2(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBSubtractRow_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBSubtractRow_AVX2(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBSubtractRow_Any_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBSubtractRow_Any_AVX2(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBSubtractRow_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBSubtractRow_NEON(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBSubtractRow_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer src_argb1, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb1.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBSubtractRow_Any_NEON(src_argb, src_argb1, dst_argb, width);
    }
  }

  public static void ARGBToRGB24Row_Any_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRGB24Row_Any_SSSE3(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToRAWRow_Any_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRAWRow_Any_SSSE3(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToRGB565Row_Any_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRGB565Row_Any_SSE2(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToARGB1555Row_Any_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToARGB1555Row_Any_SSE2(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToARGB4444Row_Any_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToARGB4444Row_Any_SSE2(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToRGB24Row_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRGB24Row_Any_NEON(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToRAWRow_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRAWRow_Any_NEON(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToRGB565Row_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToRGB565Row_Any_NEON(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToARGB1555Row_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToARGB1555Row_Any_NEON(src_argb, dst_rgb, pix);
    }
  }

  public static void ARGBToARGB4444Row_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_rgb, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_rgb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToARGB4444Row_Any_NEON(src_argb, dst_rgb, pix);
    }
  }

  public static void I444ToARGBRow_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I444ToARGBRow_Any_NEON(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToARGBRow_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGBRow_Any_NEON(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I411ToARGBRow_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I411ToARGBRow_Any_NEON(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToBGRARow_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToBGRARow_Any_NEON(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToABGRRow_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToABGRRow_Any_NEON(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToRGBARow_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGBARow_Any_NEON(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToRGB24Row_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGB24Row_Any_NEON(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToRAWRow_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRAWRow_Any_NEON(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToARGB4444Row_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGB4444Row_Any_NEON(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToARGB1555Row_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGB1555Row_Any_NEON(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToRGB565Row_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToRGB565Row_Any_NEON(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void NV12ToARGBRow_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV12ToARGBRow_Any_NEON(src_y, src_uv, dst_argb, width);
    }
  }

  public static void NV21ToARGBRow_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV21ToARGBRow_Any_NEON(src_y, src_uv, dst_argb, width);
    }
  }

  public static void NV12ToRGB565Row_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV12ToRGB565Row_Any_NEON(src_y, src_uv, dst_argb, width);
    }
  }

  public static void NV21ToRGB565Row_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_uv, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.NV21ToRGB565Row_Any_NEON(src_y, src_uv, dst_argb, width);
    }
  }

  public static void YUY2ToARGBRow_Any_NEON(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_argb, int width) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToARGBRow_Any_NEON(src_yuy2, dst_argb, width);
    }
  }

  public static void UYVYToARGBRow_Any_NEON(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_argb, int width) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToARGBRow_Any_NEON(src_uyvy, dst_argb, width);
    }
  }

  public static void I422ToARGBRow_MIPS_DSPR2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToARGBRow_MIPS_DSPR2(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToBGRARow_MIPS_DSPR2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToBGRARow_MIPS_DSPR2(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void I422ToABGRRow_MIPS_DSPR2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_argb, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToABGRRow_MIPS_DSPR2(src_y, src_u, src_v, dst_argb, width);
    }
  }

  public static void YUY2ToYRow_AVX2(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_y, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToYRow_AVX2(src_yuy2, dst_y, pix);
    }
  }

  public static void YUY2ToUVRow_AVX2(java.nio.ByteBuffer src_yuy2, int stride_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUVRow_AVX2(src_yuy2, stride_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void YUY2ToUV422Row_AVX2(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUV422Row_AVX2(src_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void YUY2ToYRow_SSE2(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_y, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToYRow_SSE2(src_yuy2, dst_y, pix);
    }
  }

  public static void YUY2ToUVRow_SSE2(java.nio.ByteBuffer src_yuy2, int stride_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUVRow_SSE2(src_yuy2, stride_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void YUY2ToUV422Row_SSE2(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUV422Row_SSE2(src_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void YUY2ToYRow_Unaligned_SSE2(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_y, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToYRow_Unaligned_SSE2(src_yuy2, dst_y, pix);
    }
  }

  public static void YUY2ToUVRow_Unaligned_SSE2(java.nio.ByteBuffer src_yuy2, int stride_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUVRow_Unaligned_SSE2(src_yuy2, stride_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void YUY2ToUV422Row_Unaligned_SSE2(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUV422Row_Unaligned_SSE2(src_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void YUY2ToYRow_NEON(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_y, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToYRow_NEON(src_yuy2, dst_y, pix);
    }
  }

  public static void YUY2ToUVRow_NEON(java.nio.ByteBuffer src_yuy2, int stride_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUVRow_NEON(src_yuy2, stride_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void YUY2ToUV422Row_NEON(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUV422Row_NEON(src_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void YUY2ToYRow_C(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_y, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToYRow_C(src_yuy2, dst_y, pix);
    }
  }

  public static void YUY2ToUVRow_C(java.nio.ByteBuffer src_yuy2, int stride_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUVRow_C(src_yuy2, stride_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void YUY2ToUV422Row_C(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUV422Row_C(src_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void YUY2ToYRow_Any_AVX2(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_y, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToYRow_Any_AVX2(src_yuy2, dst_y, pix);
    }
  }

  public static void YUY2ToUVRow_Any_AVX2(java.nio.ByteBuffer src_yuy2, int stride_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUVRow_Any_AVX2(src_yuy2, stride_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void YUY2ToUV422Row_Any_AVX2(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUV422Row_Any_AVX2(src_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void YUY2ToYRow_Any_SSE2(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_y, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToYRow_Any_SSE2(src_yuy2, dst_y, pix);
    }
  }

  public static void YUY2ToUVRow_Any_SSE2(java.nio.ByteBuffer src_yuy2, int stride_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUVRow_Any_SSE2(src_yuy2, stride_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void YUY2ToUV422Row_Any_SSE2(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUV422Row_Any_SSE2(src_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void YUY2ToYRow_Any_NEON(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_y, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToYRow_Any_NEON(src_yuy2, dst_y, pix);
    }
  }

  public static void YUY2ToUVRow_Any_NEON(java.nio.ByteBuffer src_yuy2, int stride_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUVRow_Any_NEON(src_yuy2, stride_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void YUY2ToUV422Row_Any_NEON(java.nio.ByteBuffer src_yuy2, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_yuy2.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.YUY2ToUV422Row_Any_NEON(src_yuy2, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToYRow_AVX2(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_y, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToYRow_AVX2(src_uyvy, dst_y, pix);
    }
  }

  public static void UYVYToUVRow_AVX2(java.nio.ByteBuffer src_uyvy, int stride_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUVRow_AVX2(src_uyvy, stride_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToUV422Row_AVX2(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUV422Row_AVX2(src_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToYRow_SSE2(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_y, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToYRow_SSE2(src_uyvy, dst_y, pix);
    }
  }

  public static void UYVYToUVRow_SSE2(java.nio.ByteBuffer src_uyvy, int stride_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUVRow_SSE2(src_uyvy, stride_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToUV422Row_SSE2(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUV422Row_SSE2(src_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToYRow_Unaligned_SSE2(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_y, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToYRow_Unaligned_SSE2(src_uyvy, dst_y, pix);
    }
  }

  public static void UYVYToUVRow_Unaligned_SSE2(java.nio.ByteBuffer src_uyvy, int stride_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUVRow_Unaligned_SSE2(src_uyvy, stride_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToUV422Row_Unaligned_SSE2(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUV422Row_Unaligned_SSE2(src_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToYRow_NEON(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_y, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToYRow_NEON(src_uyvy, dst_y, pix);
    }
  }

  public static void UYVYToUVRow_NEON(java.nio.ByteBuffer src_uyvy, int stride_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUVRow_NEON(src_uyvy, stride_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToUV422Row_NEON(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUV422Row_NEON(src_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToYRow_C(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_y, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToYRow_C(src_uyvy, dst_y, pix);
    }
  }

  public static void UYVYToUVRow_C(java.nio.ByteBuffer src_uyvy, int stride_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUVRow_C(src_uyvy, stride_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToUV422Row_C(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUV422Row_C(src_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToYRow_Any_AVX2(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_y, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToYRow_Any_AVX2(src_uyvy, dst_y, pix);
    }
  }

  public static void UYVYToUVRow_Any_AVX2(java.nio.ByteBuffer src_uyvy, int stride_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUVRow_Any_AVX2(src_uyvy, stride_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToUV422Row_Any_AVX2(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUV422Row_Any_AVX2(src_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToYRow_Any_SSE2(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_y, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToYRow_Any_SSE2(src_uyvy, dst_y, pix);
    }
  }

  public static void UYVYToUVRow_Any_SSE2(java.nio.ByteBuffer src_uyvy, int stride_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUVRow_Any_SSE2(src_uyvy, stride_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToUV422Row_Any_SSE2(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUV422Row_Any_SSE2(src_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToYRow_Any_NEON(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_y, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToYRow_Any_NEON(src_uyvy, dst_y, pix);
    }
  }

  public static void UYVYToUVRow_Any_NEON(java.nio.ByteBuffer src_uyvy, int stride_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUVRow_Any_NEON(src_uyvy, stride_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void UYVYToUV422Row_Any_NEON(java.nio.ByteBuffer src_uyvy, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int pix) {
  assert src_uyvy.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.UYVYToUV422Row_Any_NEON(src_uyvy, dst_u, dst_v, pix);
    }
  }

  public static void HalfRow_C(java.nio.ByteBuffer src_uv, int src_uv_stride, java.nio.ByteBuffer dst_uv, int pix) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_uv.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.HalfRow_C(src_uv, src_uv_stride, dst_uv, pix);
    }
  }

  public static void HalfRow_SSE2(java.nio.ByteBuffer src_uv, int src_uv_stride, java.nio.ByteBuffer dst_uv, int pix) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_uv.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.HalfRow_SSE2(src_uv, src_uv_stride, dst_uv, pix);
    }
  }

  public static void HalfRow_AVX2(java.nio.ByteBuffer src_uv, int src_uv_stride, java.nio.ByteBuffer dst_uv, int pix) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_uv.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.HalfRow_AVX2(src_uv, src_uv_stride, dst_uv, pix);
    }
  }

  public static void HalfRow_NEON(java.nio.ByteBuffer src_uv, int src_uv_stride, java.nio.ByteBuffer dst_uv, int pix) {
  assert src_uv.isDirect() : "Buffer must be allocated direct.";
  assert dst_uv.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.HalfRow_NEON(src_uv, src_uv_stride, dst_uv, pix);
    }
  }

  public static void HalfRow_16_C(SWIGTYPE_p_unsigned_short src_uv, int src_uv_stride, SWIGTYPE_p_unsigned_short dst_uv, int pix) {
    libyuvJNI.HalfRow_16_C(SWIGTYPE_p_unsigned_short.getCPtr(src_uv), src_uv_stride, SWIGTYPE_p_unsigned_short.getCPtr(dst_uv), pix);
  }

  public static void ARGBToBayerRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_bayer, long selector, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bayer.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToBayerRow_C(src_argb, dst_bayer, selector, pix);
    }
  }

  public static void ARGBToBayerRow_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_bayer, long selector, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bayer.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToBayerRow_SSSE3(src_argb, dst_bayer, selector, pix);
    }
  }

  public static void ARGBToBayerRow_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_bayer, long selector, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bayer.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToBayerRow_NEON(src_argb, dst_bayer, selector, pix);
    }
  }

  public static void ARGBToBayerRow_Any_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_bayer, long selector, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bayer.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToBayerRow_Any_SSSE3(src_argb, dst_bayer, selector, pix);
    }
  }

  public static void ARGBToBayerRow_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_bayer, long selector, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bayer.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToBayerRow_Any_NEON(src_argb, dst_bayer, selector, pix);
    }
  }

  public static void ARGBToBayerGGRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_bayer, long arg2, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bayer.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToBayerGGRow_C(src_argb, dst_bayer, arg2, pix);
    }
  }

  public static void ARGBToBayerGGRow_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_bayer, long arg2, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bayer.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToBayerGGRow_SSE2(src_argb, dst_bayer, arg2, pix);
    }
  }

  public static void ARGBToBayerGGRow_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_bayer, long arg2, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bayer.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToBayerGGRow_NEON(src_argb, dst_bayer, arg2, pix);
    }
  }

  public static void ARGBToBayerGGRow_Any_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_bayer, long arg2, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bayer.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToBayerGGRow_Any_SSE2(src_argb, dst_bayer, arg2, pix);
    }
  }

  public static void ARGBToBayerGGRow_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_bayer, long arg2, int pix) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_bayer.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBToBayerGGRow_Any_NEON(src_argb, dst_bayer, arg2, pix);
    }
  }

  public static void I422ToYUY2Row_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_yuy2, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_yuy2.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToYUY2Row_C(src_y, src_u, src_v, dst_yuy2, width);
    }
  }

  public static void I422ToUYVYRow_C(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_uyvy, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_uyvy.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToUYVYRow_C(src_y, src_u, src_v, dst_uyvy, width);
    }
  }

  public static void I422ToYUY2Row_SSE2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_yuy2, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_yuy2.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToYUY2Row_SSE2(src_y, src_u, src_v, dst_yuy2, width);
    }
  }

  public static void I422ToUYVYRow_SSE2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_uyvy, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_uyvy.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToUYVYRow_SSE2(src_y, src_u, src_v, dst_uyvy, width);
    }
  }

  public static void I422ToYUY2Row_Any_SSE2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_yuy2, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_yuy2.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToYUY2Row_Any_SSE2(src_y, src_u, src_v, dst_yuy2, width);
    }
  }

  public static void I422ToUYVYRow_Any_SSE2(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_uyvy, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_uyvy.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToUYVYRow_Any_SSE2(src_y, src_u, src_v, dst_uyvy, width);
    }
  }

  public static void I422ToYUY2Row_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_yuy2, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_yuy2.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToYUY2Row_NEON(src_y, src_u, src_v, dst_yuy2, width);
    }
  }

  public static void I422ToUYVYRow_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_uyvy, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_uyvy.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToUYVYRow_NEON(src_y, src_u, src_v, dst_uyvy, width);
    }
  }

  public static void I422ToYUY2Row_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_yuy2, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_yuy2.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToYUY2Row_Any_NEON(src_y, src_u, src_v, dst_yuy2, width);
    }
  }

  public static void I422ToUYVYRow_Any_NEON(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, java.nio.ByteBuffer dst_uyvy, int width) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_uyvy.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.I422ToUYVYRow_Any_NEON(src_y, src_u, src_v, dst_uyvy, width);
    }
  }

  public static void ARGBAttenuateRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAttenuateRow_C(src_argb, dst_argb, width);
    }
  }

  public static void ARGBAttenuateRow_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAttenuateRow_SSE2(src_argb, dst_argb, width);
    }
  }

  public static void ARGBAttenuateRow_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAttenuateRow_SSSE3(src_argb, dst_argb, width);
    }
  }

  public static void ARGBAttenuateRow_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAttenuateRow_AVX2(src_argb, dst_argb, width);
    }
  }

  public static void ARGBAttenuateRow_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAttenuateRow_NEON(src_argb, dst_argb, width);
    }
  }

  public static void ARGBAttenuateRow_Any_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAttenuateRow_Any_SSE2(src_argb, dst_argb, width);
    }
  }

  public static void ARGBAttenuateRow_Any_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAttenuateRow_Any_SSSE3(src_argb, dst_argb, width);
    }
  }

  public static void ARGBAttenuateRow_Any_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAttenuateRow_Any_AVX2(src_argb, dst_argb, width);
    }
  }

  public static void ARGBAttenuateRow_Any_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAttenuateRow_Any_NEON(src_argb, dst_argb, width);
    }
  }

  public static long[] getFixed_invtbl8() {
    return libyuvJNI.fixed_invtbl8_get();
  }

  public static void ARGBUnattenuateRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBUnattenuateRow_C(src_argb, dst_argb, width);
    }
  }

  public static void ARGBUnattenuateRow_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBUnattenuateRow_SSE2(src_argb, dst_argb, width);
    }
  }

  public static void ARGBUnattenuateRow_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBUnattenuateRow_AVX2(src_argb, dst_argb, width);
    }
  }

  public static void ARGBUnattenuateRow_Any_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBUnattenuateRow_Any_SSE2(src_argb, dst_argb, width);
    }
  }

  public static void ARGBUnattenuateRow_Any_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBUnattenuateRow_Any_AVX2(src_argb, dst_argb, width);
    }
  }

  public static void ARGBGrayRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBGrayRow_C(src_argb, dst_argb, width);
    }
  }

  public static void ARGBGrayRow_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBGrayRow_SSSE3(src_argb, dst_argb, width);
    }
  }

  public static void ARGBGrayRow_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBGrayRow_NEON(src_argb, dst_argb, width);
    }
  }

  public static void ARGBSepiaRow_C(java.nio.ByteBuffer dst_argb, int width) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBSepiaRow_C(dst_argb, width);
    }
  }

  public static void ARGBSepiaRow_SSSE3(java.nio.ByteBuffer dst_argb, int width) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBSepiaRow_SSSE3(dst_argb, width);
    }
  }

  public static void ARGBSepiaRow_NEON(java.nio.ByteBuffer dst_argb, int width) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBSepiaRow_NEON(dst_argb, width);
    }
  }

  public static void ARGBColorMatrixRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, SWIGTYPE_p_signed_char matrix_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBColorMatrixRow_C(src_argb, dst_argb, SWIGTYPE_p_signed_char.getCPtr(matrix_argb), width);
    }
  }

  public static void ARGBColorMatrixRow_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, SWIGTYPE_p_signed_char matrix_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBColorMatrixRow_SSSE3(src_argb, dst_argb, SWIGTYPE_p_signed_char.getCPtr(matrix_argb), width);
    }
  }

  public static void ARGBColorMatrixRow_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, SWIGTYPE_p_signed_char matrix_argb, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBColorMatrixRow_NEON(src_argb, dst_argb, SWIGTYPE_p_signed_char.getCPtr(matrix_argb), width);
    }
  }

  public static void ARGBColorTableRow_C(java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer table_argb, int width) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert table_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBColorTableRow_C(dst_argb, table_argb, width);
    }
  }

  public static void ARGBColorTableRow_X86(java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer table_argb, int width) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert table_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBColorTableRow_X86(dst_argb, table_argb, width);
    }
  }

  public static void RGBColorTableRow_C(java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer table_argb, int width) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert table_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGBColorTableRow_C(dst_argb, table_argb, width);
    }
  }

  public static void RGBColorTableRow_X86(java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer table_argb, int width) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert table_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.RGBColorTableRow_X86(dst_argb, table_argb, width);
    }
  }

  public static void ARGBQuantizeRow_C(java.nio.ByteBuffer dst_argb, int scale, int interval_size, int interval_offset, int width) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBQuantizeRow_C(dst_argb, scale, interval_size, interval_offset, width);
    }
  }

  public static void ARGBQuantizeRow_SSE2(java.nio.ByteBuffer dst_argb, int scale, int interval_size, int interval_offset, int width) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBQuantizeRow_SSE2(dst_argb, scale, interval_size, interval_offset, width);
    }
  }

  public static void ARGBQuantizeRow_NEON(java.nio.ByteBuffer dst_argb, int scale, int interval_size, int interval_offset, int width) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBQuantizeRow_NEON(dst_argb, scale, interval_size, interval_offset, width);
    }
  }

  public static void ARGBShadeRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width, long value) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBShadeRow_C(src_argb, dst_argb, width, value);
    }
  }

  public static void ARGBShadeRow_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width, long value) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBShadeRow_SSE2(src_argb, dst_argb, width, value);
    }
  }

  public static void ARGBShadeRow_NEON(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width, long value) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBShadeRow_NEON(src_argb, dst_argb, width, value);
    }
  }

  public static void CumulativeSumToAverageRow_SSE2(SWIGTYPE_p_int topleft, SWIGTYPE_p_int botleft, int width, int area, java.nio.ByteBuffer dst, int count) {
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.CumulativeSumToAverageRow_SSE2(SWIGTYPE_p_int.getCPtr(topleft), SWIGTYPE_p_int.getCPtr(botleft), width, area, dst, count);
    }
  }

  public static void ComputeCumulativeSumRow_SSE2(java.nio.ByteBuffer row, SWIGTYPE_p_int cumsum, SWIGTYPE_p_int previous_cumsum, int width) {
  assert row.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ComputeCumulativeSumRow_SSE2(row, SWIGTYPE_p_int.getCPtr(cumsum), SWIGTYPE_p_int.getCPtr(previous_cumsum), width);
    }
  }

  public static void CumulativeSumToAverageRow_C(SWIGTYPE_p_int topleft, SWIGTYPE_p_int botleft, int width, int area, java.nio.ByteBuffer dst, int count) {
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.CumulativeSumToAverageRow_C(SWIGTYPE_p_int.getCPtr(topleft), SWIGTYPE_p_int.getCPtr(botleft), width, area, dst, count);
    }
  }

  public static void ComputeCumulativeSumRow_C(java.nio.ByteBuffer row, SWIGTYPE_p_int cumsum, SWIGTYPE_p_int previous_cumsum, int width) {
  assert row.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ComputeCumulativeSumRow_C(row, SWIGTYPE_p_int.getCPtr(cumsum), SWIGTYPE_p_int.getCPtr(previous_cumsum), width);
    }
  }

  public static void ARGBAffineRow_SSE2(java.nio.ByteBuffer src_argb, int src_argb_stride, java.nio.ByteBuffer dst_argb, SWIGTYPE_p_float uv_dudv, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBAffineRow_SSE2(src_argb, src_argb_stride, dst_argb, SWIGTYPE_p_float.getCPtr(uv_dudv), width);
    }
  }

  public static void InterpolateRow_C(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride_ptr, int width, int source_y_fraction) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.InterpolateRow_C(dst_ptr, src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride_ptr), width, source_y_fraction);
    }
  }

  public static void InterpolateRow_SSE2(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride_ptr, int width, int source_y_fraction) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.InterpolateRow_SSE2(dst_ptr, src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride_ptr), width, source_y_fraction);
    }
  }

  public static void InterpolateRow_SSSE3(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride_ptr, int width, int source_y_fraction) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.InterpolateRow_SSSE3(dst_ptr, src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride_ptr), width, source_y_fraction);
    }
  }

  public static void InterpolateRow_AVX2(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride_ptr, int width, int source_y_fraction) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.InterpolateRow_AVX2(dst_ptr, src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride_ptr), width, source_y_fraction);
    }
  }

  public static void InterpolateRow_NEON(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride_ptr, int width, int source_y_fraction) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.InterpolateRow_NEON(dst_ptr, src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride_ptr), width, source_y_fraction);
    }
  }

  public static void InterpolateRows_MIPS_DSPR2(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride_ptr, int width, int source_y_fraction) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.InterpolateRows_MIPS_DSPR2(dst_ptr, src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride_ptr), width, source_y_fraction);
    }
  }

  public static void InterpolateRow_Unaligned_SSE2(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride_ptr, int width, int source_y_fraction) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.InterpolateRow_Unaligned_SSE2(dst_ptr, src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride_ptr), width, source_y_fraction);
    }
  }

  public static void InterpolateRow_Unaligned_SSSE3(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride_ptr, int width, int source_y_fraction) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.InterpolateRow_Unaligned_SSSE3(dst_ptr, src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride_ptr), width, source_y_fraction);
    }
  }

  public static void InterpolateRow_Any_NEON(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride_ptr, int width, int source_y_fraction) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.InterpolateRow_Any_NEON(dst_ptr, src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride_ptr), width, source_y_fraction);
    }
  }

  public static void InterpolateRow_Any_SSE2(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride_ptr, int width, int source_y_fraction) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.InterpolateRow_Any_SSE2(dst_ptr, src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride_ptr), width, source_y_fraction);
    }
  }

  public static void InterpolateRow_Any_SSSE3(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride_ptr, int width, int source_y_fraction) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.InterpolateRow_Any_SSSE3(dst_ptr, src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride_ptr), width, source_y_fraction);
    }
  }

  public static void InterpolateRow_Any_AVX2(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride_ptr, int width, int source_y_fraction) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.InterpolateRow_Any_AVX2(dst_ptr, src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride_ptr), width, source_y_fraction);
    }
  }

  public static void InterpolateRows_Any_MIPS_DSPR2(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride_ptr, int width, int source_y_fraction) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.InterpolateRows_Any_MIPS_DSPR2(dst_ptr, src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride_ptr), width, source_y_fraction);
    }
  }

  public static void InterpolateRow_16_C(SWIGTYPE_p_unsigned_short dst_ptr, SWIGTYPE_p_unsigned_short src_ptr, SWIGTYPE_p_ptrdiff_t src_stride_ptr, int width, int source_y_fraction) {
    libyuvJNI.InterpolateRow_16_C(SWIGTYPE_p_unsigned_short.getCPtr(dst_ptr), SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride_ptr), width, source_y_fraction);
  }

  public static void SobelXRow_C(java.nio.ByteBuffer src_y0, java.nio.ByteBuffer src_y1, java.nio.ByteBuffer src_y2, java.nio.ByteBuffer dst_sobelx, int width) {
  assert src_y0.isDirect() : "Buffer must be allocated direct.";
  assert src_y1.isDirect() : "Buffer must be allocated direct.";
  assert src_y2.isDirect() : "Buffer must be allocated direct.";
  assert dst_sobelx.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SobelXRow_C(src_y0, src_y1, src_y2, dst_sobelx, width);
    }
  }

  public static void SobelXRow_SSE2(java.nio.ByteBuffer src_y0, java.nio.ByteBuffer src_y1, java.nio.ByteBuffer src_y2, java.nio.ByteBuffer dst_sobelx, int width) {
  assert src_y0.isDirect() : "Buffer must be allocated direct.";
  assert src_y1.isDirect() : "Buffer must be allocated direct.";
  assert src_y2.isDirect() : "Buffer must be allocated direct.";
  assert dst_sobelx.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SobelXRow_SSE2(src_y0, src_y1, src_y2, dst_sobelx, width);
    }
  }

  public static void SobelXRow_NEON(java.nio.ByteBuffer src_y0, java.nio.ByteBuffer src_y1, java.nio.ByteBuffer src_y2, java.nio.ByteBuffer dst_sobelx, int width) {
  assert src_y0.isDirect() : "Buffer must be allocated direct.";
  assert src_y1.isDirect() : "Buffer must be allocated direct.";
  assert src_y2.isDirect() : "Buffer must be allocated direct.";
  assert dst_sobelx.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SobelXRow_NEON(src_y0, src_y1, src_y2, dst_sobelx, width);
    }
  }

  public static void SobelYRow_C(java.nio.ByteBuffer src_y0, java.nio.ByteBuffer src_y1, java.nio.ByteBuffer dst_sobely, int width) {
  assert src_y0.isDirect() : "Buffer must be allocated direct.";
  assert src_y1.isDirect() : "Buffer must be allocated direct.";
  assert dst_sobely.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SobelYRow_C(src_y0, src_y1, dst_sobely, width);
    }
  }

  public static void SobelYRow_SSE2(java.nio.ByteBuffer src_y0, java.nio.ByteBuffer src_y1, java.nio.ByteBuffer dst_sobely, int width) {
  assert src_y0.isDirect() : "Buffer must be allocated direct.";
  assert src_y1.isDirect() : "Buffer must be allocated direct.";
  assert dst_sobely.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SobelYRow_SSE2(src_y0, src_y1, dst_sobely, width);
    }
  }

  public static void SobelYRow_NEON(java.nio.ByteBuffer src_y0, java.nio.ByteBuffer src_y1, java.nio.ByteBuffer dst_sobely, int width) {
  assert src_y0.isDirect() : "Buffer must be allocated direct.";
  assert src_y1.isDirect() : "Buffer must be allocated direct.";
  assert dst_sobely.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SobelYRow_NEON(src_y0, src_y1, dst_sobely, width);
    }
  }

  public static void SobelRow_C(java.nio.ByteBuffer src_sobelx, java.nio.ByteBuffer src_sobely, java.nio.ByteBuffer dst_argb, int width) {
  assert src_sobelx.isDirect() : "Buffer must be allocated direct.";
  assert src_sobely.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SobelRow_C(src_sobelx, src_sobely, dst_argb, width);
    }
  }

  public static void SobelRow_SSE2(java.nio.ByteBuffer src_sobelx, java.nio.ByteBuffer src_sobely, java.nio.ByteBuffer dst_argb, int width) {
  assert src_sobelx.isDirect() : "Buffer must be allocated direct.";
  assert src_sobely.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SobelRow_SSE2(src_sobelx, src_sobely, dst_argb, width);
    }
  }

  public static void SobelRow_NEON(java.nio.ByteBuffer src_sobelx, java.nio.ByteBuffer src_sobely, java.nio.ByteBuffer dst_argb, int width) {
  assert src_sobelx.isDirect() : "Buffer must be allocated direct.";
  assert src_sobely.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SobelRow_NEON(src_sobelx, src_sobely, dst_argb, width);
    }
  }

  public static void SobelToPlaneRow_C(java.nio.ByteBuffer src_sobelx, java.nio.ByteBuffer src_sobely, java.nio.ByteBuffer dst_y, int width) {
  assert src_sobelx.isDirect() : "Buffer must be allocated direct.";
  assert src_sobely.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SobelToPlaneRow_C(src_sobelx, src_sobely, dst_y, width);
    }
  }

  public static void SobelToPlaneRow_SSE2(java.nio.ByteBuffer src_sobelx, java.nio.ByteBuffer src_sobely, java.nio.ByteBuffer dst_y, int width) {
  assert src_sobelx.isDirect() : "Buffer must be allocated direct.";
  assert src_sobely.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SobelToPlaneRow_SSE2(src_sobelx, src_sobely, dst_y, width);
    }
  }

  public static void SobelToPlaneRow_NEON(java.nio.ByteBuffer src_sobelx, java.nio.ByteBuffer src_sobely, java.nio.ByteBuffer dst_y, int width) {
  assert src_sobelx.isDirect() : "Buffer must be allocated direct.";
  assert src_sobely.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SobelToPlaneRow_NEON(src_sobelx, src_sobely, dst_y, width);
    }
  }

  public static void SobelXYRow_C(java.nio.ByteBuffer src_sobelx, java.nio.ByteBuffer src_sobely, java.nio.ByteBuffer dst_argb, int width) {
  assert src_sobelx.isDirect() : "Buffer must be allocated direct.";
  assert src_sobely.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SobelXYRow_C(src_sobelx, src_sobely, dst_argb, width);
    }
  }

  public static void SobelXYRow_SSE2(java.nio.ByteBuffer src_sobelx, java.nio.ByteBuffer src_sobely, java.nio.ByteBuffer dst_argb, int width) {
  assert src_sobelx.isDirect() : "Buffer must be allocated direct.";
  assert src_sobely.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SobelXYRow_SSE2(src_sobelx, src_sobely, dst_argb, width);
    }
  }

  public static void SobelXYRow_NEON(java.nio.ByteBuffer src_sobelx, java.nio.ByteBuffer src_sobely, java.nio.ByteBuffer dst_argb, int width) {
  assert src_sobelx.isDirect() : "Buffer must be allocated direct.";
  assert src_sobely.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.SobelXYRow_NEON(src_sobelx, src_sobely, dst_argb, width);
    }
  }

  public static void ARGBPolynomialRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, SWIGTYPE_p_float poly, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBPolynomialRow_C(src_argb, dst_argb, SWIGTYPE_p_float.getCPtr(poly), width);
    }
  }

  public static void ARGBPolynomialRow_SSE2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, SWIGTYPE_p_float poly, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBPolynomialRow_SSE2(src_argb, dst_argb, SWIGTYPE_p_float.getCPtr(poly), width);
    }
  }

  public static void ARGBPolynomialRow_AVX2(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, SWIGTYPE_p_float poly, int width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBPolynomialRow_AVX2(src_argb, dst_argb, SWIGTYPE_p_float.getCPtr(poly), width);
    }
  }

  public static void ARGBLumaColorTableRow_C(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width, java.nio.ByteBuffer luma, long lumacoeff) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert luma.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBLumaColorTableRow_C(src_argb, dst_argb, width, luma, lumacoeff);
    }
  }

  public static void ARGBLumaColorTableRow_SSSE3(java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int width, java.nio.ByteBuffer luma, long lumacoeff) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert luma.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ARGBLumaColorTableRow_SSSE3(src_argb, dst_argb, width, luma, lumacoeff);
    }
  }

  public static void ScalePlane(java.nio.ByteBuffer src, int src_stride, int src_width, int src_height, java.nio.ByteBuffer dst, int dst_stride, int dst_width, int dst_height, FilterModeEnum filtering) {
  assert src.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScalePlane(src, src_stride, src_width, src_height, dst, dst_stride, dst_width, dst_height, filtering.swigValue());
    }
  }

  public static void ScalePlane_16(SWIGTYPE_p_unsigned_short src, int src_stride, int src_width, int src_height, SWIGTYPE_p_unsigned_short dst, int dst_stride, int dst_width, int dst_height, FilterModeEnum filtering) {
    libyuvJNI.ScalePlane_16(SWIGTYPE_p_unsigned_short.getCPtr(src), src_stride, src_width, src_height, SWIGTYPE_p_unsigned_short.getCPtr(dst), dst_stride, dst_width, dst_height, filtering.swigValue());
  }

  public static int I420Scale(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, int src_width, int src_height, java.nio.ByteBuffer dst_y, int dst_stride_y, java.nio.ByteBuffer dst_u, int dst_stride_u, java.nio.ByteBuffer dst_v, int dst_stride_v, int dst_width, int dst_height, FilterModeEnum filtering) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.I420Scale(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, src_width, src_height, dst_y, dst_stride_y, dst_u, dst_stride_u, dst_v, dst_stride_v, dst_width, dst_height, filtering.swigValue());
    }
  }

  public static int I420Scale_16(SWIGTYPE_p_unsigned_short src_y, int src_stride_y, SWIGTYPE_p_unsigned_short src_u, int src_stride_u, SWIGTYPE_p_unsigned_short src_v, int src_stride_v, int src_width, int src_height, SWIGTYPE_p_unsigned_short dst_y, int dst_stride_y, SWIGTYPE_p_unsigned_short dst_u, int dst_stride_u, SWIGTYPE_p_unsigned_short dst_v, int dst_stride_v, int dst_width, int dst_height, FilterModeEnum filtering) {
    return libyuvJNI.I420Scale_16(SWIGTYPE_p_unsigned_short.getCPtr(src_y), src_stride_y, SWIGTYPE_p_unsigned_short.getCPtr(src_u), src_stride_u, SWIGTYPE_p_unsigned_short.getCPtr(src_v), src_stride_v, src_width, src_height, SWIGTYPE_p_unsigned_short.getCPtr(dst_y), dst_stride_y, SWIGTYPE_p_unsigned_short.getCPtr(dst_u), dst_stride_u, SWIGTYPE_p_unsigned_short.getCPtr(dst_v), dst_stride_v, dst_width, dst_height, filtering.swigValue());
  }

  public static int Scale(java.nio.ByteBuffer src_y, java.nio.ByteBuffer src_u, java.nio.ByteBuffer src_v, int src_stride_y, int src_stride_u, int src_stride_v, int src_width, int src_height, java.nio.ByteBuffer dst_y, java.nio.ByteBuffer dst_u, java.nio.ByteBuffer dst_v, int dst_stride_y, int dst_stride_u, int dst_stride_v, int dst_width, int dst_height, int interpolate) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_y.isDirect() : "Buffer must be allocated direct.";
  assert dst_u.isDirect() : "Buffer must be allocated direct.";
  assert dst_v.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.Scale(src_y, src_u, src_v, src_stride_y, src_stride_u, src_stride_v, src_width, src_height, dst_y, dst_u, dst_v, dst_stride_y, dst_stride_u, dst_stride_v, dst_width, dst_height, interpolate);
    }
  }

  public static int ScaleOffset(java.nio.ByteBuffer src_i420, int src_width, int src_height, java.nio.ByteBuffer dst_i420, int dst_width, int dst_height, int dst_yoffset, int interpolate) {
  assert src_i420.isDirect() : "Buffer must be allocated direct.";
  assert dst_i420.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ScaleOffset(src_i420, src_width, src_height, dst_i420, dst_width, dst_height, dst_yoffset, interpolate);
    }
  }

  public static void SetUseReferenceImpl(int use) {
    libyuvJNI.SetUseReferenceImpl(use);
  }

  public static int ARGBScale(java.nio.ByteBuffer src_argb, int src_stride_argb, int src_width, int src_height, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int dst_width, int dst_height, FilterModeEnum filtering) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBScale(src_argb, src_stride_argb, src_width, src_height, dst_argb, dst_stride_argb, dst_width, dst_height, filtering.swigValue());
    }
  }

  public static int ARGBScaleClip(java.nio.ByteBuffer src_argb, int src_stride_argb, int src_width, int src_height, java.nio.ByteBuffer dst_argb, int dst_stride_argb, int dst_width, int dst_height, int clip_x, int clip_y, int clip_width, int clip_height, FilterModeEnum filtering) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.ARGBScaleClip(src_argb, src_stride_argb, src_width, src_height, dst_argb, dst_stride_argb, dst_width, dst_height, clip_x, clip_y, clip_width, clip_height, filtering.swigValue());
    }
  }

  public static int YUVToARGBScaleClip(java.nio.ByteBuffer src_y, int src_stride_y, java.nio.ByteBuffer src_u, int src_stride_u, java.nio.ByteBuffer src_v, int src_stride_v, long src_fourcc, int src_width, int src_height, java.nio.ByteBuffer dst_argb, int dst_stride_argb, long dst_fourcc, int dst_width, int dst_height, int clip_x, int clip_y, int clip_width, int clip_height, FilterModeEnum filtering) {
  assert src_y.isDirect() : "Buffer must be allocated direct.";
  assert src_u.isDirect() : "Buffer must be allocated direct.";
  assert src_v.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      return libyuvJNI.YUVToARGBScaleClip(src_y, src_stride_y, src_u, src_stride_u, src_v, src_stride_v, src_fourcc, src_width, src_height, dst_argb, dst_stride_argb, dst_fourcc, dst_width, dst_height, clip_x, clip_y, clip_width, clip_height, filtering.swigValue());
    }
  }

  public static void ScalePlaneVertical(int src_height, int dst_width, int dst_height, int src_stride, int dst_stride, java.nio.ByteBuffer src_argb, java.nio.ByteBuffer dst_argb, int x, int y, int dy, int bpp, FilterModeEnum filtering) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScalePlaneVertical(src_height, dst_width, dst_height, src_stride, dst_stride, src_argb, dst_argb, x, y, dy, bpp, filtering.swigValue());
    }
  }

  public static void ScalePlaneVertical_16(int src_height, int dst_width, int dst_height, int src_stride, int dst_stride, SWIGTYPE_p_unsigned_short src_argb, SWIGTYPE_p_unsigned_short dst_argb, int x, int y, int dy, int wpp, FilterModeEnum filtering) {
    libyuvJNI.ScalePlaneVertical_16(src_height, dst_width, dst_height, src_stride, dst_stride, SWIGTYPE_p_unsigned_short.getCPtr(src_argb), SWIGTYPE_p_unsigned_short.getCPtr(dst_argb), x, y, dy, wpp, filtering.swigValue());
  }

  public static FilterModeEnum ScaleFilterReduce(int src_width, int src_height, int dst_width, int dst_height, FilterModeEnum filtering) {
    return FilterModeEnum.swigToEnum(libyuvJNI.ScaleFilterReduce(src_width, src_height, dst_width, dst_height, filtering.swigValue()));
  }

  public static int FixedDiv_C(int num, int div) {
    return libyuvJNI.FixedDiv_C(num, div);
  }

  public static int FixedDiv_X86(int num, int div) {
    return libyuvJNI.FixedDiv_X86(num, div);
  }

  public static int FixedDiv1_C(int num, int div) {
    return libyuvJNI.FixedDiv1_C(num, div);
  }

  public static int FixedDiv1_X86(int num, int div) {
    return libyuvJNI.FixedDiv1_X86(num, div);
  }

  public static void ScaleSlope(int src_width, int src_height, int dst_width, int dst_height, FilterModeEnum filtering, SWIGTYPE_p_int x, SWIGTYPE_p_int y, SWIGTYPE_p_int dx, SWIGTYPE_p_int dy) {
    libyuvJNI.ScaleSlope(src_width, src_height, dst_width, dst_height, filtering.swigValue(), SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y), SWIGTYPE_p_int.getCPtr(dx), SWIGTYPE_p_int.getCPtr(dy));
  }

  public static void ScaleRowDown2_C(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown2_C(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown2_16_C(SWIGTYPE_p_unsigned_short src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, SWIGTYPE_p_unsigned_short dst, int dst_width) {
    libyuvJNI.ScaleRowDown2_16_C(SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), SWIGTYPE_p_unsigned_short.getCPtr(dst), dst_width);
  }

  public static void ScaleRowDown2Linear_C(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown2Linear_C(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown2Linear_16_C(SWIGTYPE_p_unsigned_short src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, SWIGTYPE_p_unsigned_short dst, int dst_width) {
    libyuvJNI.ScaleRowDown2Linear_16_C(SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), SWIGTYPE_p_unsigned_short.getCPtr(dst), dst_width);
  }

  public static void ScaleRowDown2Box_C(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown2Box_C(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown2Box_16_C(SWIGTYPE_p_unsigned_short src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, SWIGTYPE_p_unsigned_short dst, int dst_width) {
    libyuvJNI.ScaleRowDown2Box_16_C(SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), SWIGTYPE_p_unsigned_short.getCPtr(dst), dst_width);
  }

  public static void ScaleRowDown4_C(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown4_C(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown4_16_C(SWIGTYPE_p_unsigned_short src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, SWIGTYPE_p_unsigned_short dst, int dst_width) {
    libyuvJNI.ScaleRowDown4_16_C(SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), SWIGTYPE_p_unsigned_short.getCPtr(dst), dst_width);
  }

  public static void ScaleRowDown4Box_C(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown4Box_C(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown4Box_16_C(SWIGTYPE_p_unsigned_short src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, SWIGTYPE_p_unsigned_short dst, int dst_width) {
    libyuvJNI.ScaleRowDown4Box_16_C(SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), SWIGTYPE_p_unsigned_short.getCPtr(dst), dst_width);
  }

  public static void ScaleRowDown34_C(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown34_C(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown34_16_C(SWIGTYPE_p_unsigned_short src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, SWIGTYPE_p_unsigned_short dst, int dst_width) {
    libyuvJNI.ScaleRowDown34_16_C(SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), SWIGTYPE_p_unsigned_short.getCPtr(dst), dst_width);
  }

  public static void ScaleRowDown34_0_Box_C(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer d, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert d.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown34_0_Box_C(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), d, dst_width);
    }
  }

  public static void ScaleRowDown34_0_Box_16_C(SWIGTYPE_p_unsigned_short src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, SWIGTYPE_p_unsigned_short d, int dst_width) {
    libyuvJNI.ScaleRowDown34_0_Box_16_C(SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), SWIGTYPE_p_unsigned_short.getCPtr(d), dst_width);
  }

  public static void ScaleRowDown34_1_Box_C(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer d, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert d.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown34_1_Box_C(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), d, dst_width);
    }
  }

  public static void ScaleRowDown34_1_Box_16_C(SWIGTYPE_p_unsigned_short src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, SWIGTYPE_p_unsigned_short d, int dst_width) {
    libyuvJNI.ScaleRowDown34_1_Box_16_C(SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), SWIGTYPE_p_unsigned_short.getCPtr(d), dst_width);
  }

  public static void ScaleCols_C(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, int dst_width, int x, int dx) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleCols_C(dst_ptr, src_ptr, dst_width, x, dx);
    }
  }

  public static void ScaleCols_16_C(SWIGTYPE_p_unsigned_short dst_ptr, SWIGTYPE_p_unsigned_short src_ptr, int dst_width, int x, int dx) {
    libyuvJNI.ScaleCols_16_C(SWIGTYPE_p_unsigned_short.getCPtr(dst_ptr), SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), dst_width, x, dx);
  }

  public static void ScaleColsUp2_C(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, int dst_width, int arg3, int arg4) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleColsUp2_C(dst_ptr, src_ptr, dst_width, arg3, arg4);
    }
  }

  public static void ScaleColsUp2_16_C(SWIGTYPE_p_unsigned_short dst_ptr, SWIGTYPE_p_unsigned_short src_ptr, int dst_width, int arg3, int arg4) {
    libyuvJNI.ScaleColsUp2_16_C(SWIGTYPE_p_unsigned_short.getCPtr(dst_ptr), SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), dst_width, arg3, arg4);
  }

  public static void ScaleFilterCols_C(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, int dst_width, int x, int dx) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleFilterCols_C(dst_ptr, src_ptr, dst_width, x, dx);
    }
  }

  public static void ScaleFilterCols_16_C(SWIGTYPE_p_unsigned_short dst_ptr, SWIGTYPE_p_unsigned_short src_ptr, int dst_width, int x, int dx) {
    libyuvJNI.ScaleFilterCols_16_C(SWIGTYPE_p_unsigned_short.getCPtr(dst_ptr), SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), dst_width, x, dx);
  }

  public static void ScaleFilterCols64_C(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, int dst_width, int x, int dx) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleFilterCols64_C(dst_ptr, src_ptr, dst_width, x, dx);
    }
  }

  public static void ScaleFilterCols64_16_C(SWIGTYPE_p_unsigned_short dst_ptr, SWIGTYPE_p_unsigned_short src_ptr, int dst_width, int x, int dx) {
    libyuvJNI.ScaleFilterCols64_16_C(SWIGTYPE_p_unsigned_short.getCPtr(dst_ptr), SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), dst_width, x, dx);
  }

  public static void ScaleRowDown38_C(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown38_C(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown38_16_C(SWIGTYPE_p_unsigned_short src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, SWIGTYPE_p_unsigned_short dst, int dst_width) {
    libyuvJNI.ScaleRowDown38_16_C(SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), SWIGTYPE_p_unsigned_short.getCPtr(dst), dst_width);
  }

  public static void ScaleRowDown38_3_Box_C(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown38_3_Box_C(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown38_3_Box_16_C(SWIGTYPE_p_unsigned_short src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, SWIGTYPE_p_unsigned_short dst_ptr, int dst_width) {
    libyuvJNI.ScaleRowDown38_3_Box_16_C(SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), SWIGTYPE_p_unsigned_short.getCPtr(dst_ptr), dst_width);
  }

  public static void ScaleRowDown38_2_Box_C(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown38_2_Box_C(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown38_2_Box_16_C(SWIGTYPE_p_unsigned_short src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, SWIGTYPE_p_unsigned_short dst_ptr, int dst_width) {
    libyuvJNI.ScaleRowDown38_2_Box_16_C(SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), SWIGTYPE_p_unsigned_short.getCPtr(dst_ptr), dst_width);
  }

  public static void ScaleAddRows_C(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, SWIGTYPE_p_unsigned_short dst_ptr, int src_width, int src_height) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleAddRows_C(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), SWIGTYPE_p_unsigned_short.getCPtr(dst_ptr), src_width, src_height);
    }
  }

  public static void ScaleAddRows_16_C(SWIGTYPE_p_unsigned_short src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, SWIGTYPE_p_unsigned_int dst_ptr, int src_width, int src_height) {
    libyuvJNI.ScaleAddRows_16_C(SWIGTYPE_p_unsigned_short.getCPtr(src_ptr), SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), SWIGTYPE_p_unsigned_int.getCPtr(dst_ptr), src_width, src_height);
  }

  public static void ScaleARGBRowDown2_C(java.nio.ByteBuffer src_argb, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_argb, int dst_width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBRowDown2_C(src_argb, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_argb, dst_width);
    }
  }

  public static void ScaleARGBRowDown2Linear_C(java.nio.ByteBuffer src_argb, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_argb, int dst_width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBRowDown2Linear_C(src_argb, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_argb, dst_width);
    }
  }

  public static void ScaleARGBRowDown2Box_C(java.nio.ByteBuffer src_argb, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_argb, int dst_width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBRowDown2Box_C(src_argb, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_argb, dst_width);
    }
  }

  public static void ScaleARGBRowDownEven_C(java.nio.ByteBuffer src_argb, SWIGTYPE_p_ptrdiff_t src_stride, int src_stepx, java.nio.ByteBuffer dst_argb, int dst_width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBRowDownEven_C(src_argb, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), src_stepx, dst_argb, dst_width);
    }
  }

  public static void ScaleARGBRowDownEvenBox_C(java.nio.ByteBuffer src_argb, SWIGTYPE_p_ptrdiff_t src_stride, int src_stepx, java.nio.ByteBuffer dst_argb, int dst_width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBRowDownEvenBox_C(src_argb, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), src_stepx, dst_argb, dst_width);
    }
  }

  public static void ScaleARGBCols_C(java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer src_argb, int dst_width, int x, int dx) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBCols_C(dst_argb, src_argb, dst_width, x, dx);
    }
  }

  public static void ScaleARGBCols64_C(java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer src_argb, int dst_width, int x, int dx) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBCols64_C(dst_argb, src_argb, dst_width, x, dx);
    }
  }

  public static void ScaleARGBColsUp2_C(java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer src_argb, int dst_width, int arg3, int arg4) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBColsUp2_C(dst_argb, src_argb, dst_width, arg3, arg4);
    }
  }

  public static void ScaleARGBFilterCols_C(java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer src_argb, int dst_width, int x, int dx) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBFilterCols_C(dst_argb, src_argb, dst_width, x, dx);
    }
  }

  public static void ScaleARGBFilterCols64_C(java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer src_argb, int dst_width, int x, int dx) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBFilterCols64_C(dst_argb, src_argb, dst_width, x, dx);
    }
  }

  public static void ScaleRowDown2_SSE2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown2_SSE2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown2Linear_SSE2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown2Linear_SSE2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown2Box_SSE2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown2Box_SSE2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown2_Unaligned_SSE2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown2_Unaligned_SSE2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown2Linear_Unaligned_SSE2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown2Linear_Unaligned_SSE2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown2Box_Unaligned_SSE2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown2Box_Unaligned_SSE2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown4_SSE2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown4_SSE2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown4Box_SSE2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown4Box_SSE2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown34_SSSE3(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown34_SSSE3(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown34_1_Box_SSSE3(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown34_1_Box_SSSE3(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown34_0_Box_SSSE3(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown34_0_Box_SSSE3(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown38_SSSE3(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown38_SSSE3(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown38_3_Box_SSSE3(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown38_3_Box_SSSE3(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown38_2_Box_SSSE3(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown38_2_Box_SSSE3(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleAddRows_SSE2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, SWIGTYPE_p_unsigned_short dst_ptr, int src_width, int src_height) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleAddRows_SSE2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), SWIGTYPE_p_unsigned_short.getCPtr(dst_ptr), src_width, src_height);
    }
  }

  public static void ScaleFilterCols_SSSE3(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, int dst_width, int x, int dx) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleFilterCols_SSSE3(dst_ptr, src_ptr, dst_width, x, dx);
    }
  }

  public static void ScaleColsUp2_SSE2(java.nio.ByteBuffer dst_ptr, java.nio.ByteBuffer src_ptr, int dst_width, int x, int dx) {
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleColsUp2_SSE2(dst_ptr, src_ptr, dst_width, x, dx);
    }
  }

  public static void ScaleARGBRowDown2_SSE2(java.nio.ByteBuffer src_argb, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_argb, int dst_width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBRowDown2_SSE2(src_argb, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_argb, dst_width);
    }
  }

  public static void ScaleARGBRowDown2Linear_SSE2(java.nio.ByteBuffer src_argb, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_argb, int dst_width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBRowDown2Linear_SSE2(src_argb, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_argb, dst_width);
    }
  }

  public static void ScaleARGBRowDown2Box_SSE2(java.nio.ByteBuffer src_argb, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_argb, int dst_width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBRowDown2Box_SSE2(src_argb, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_argb, dst_width);
    }
  }

  public static void ScaleARGBRowDownEven_SSE2(java.nio.ByteBuffer src_argb, SWIGTYPE_p_ptrdiff_t src_stride, int src_stepx, java.nio.ByteBuffer dst_argb, int dst_width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBRowDownEven_SSE2(src_argb, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), src_stepx, dst_argb, dst_width);
    }
  }

  public static void ScaleARGBRowDownEvenBox_SSE2(java.nio.ByteBuffer src_argb, SWIGTYPE_p_ptrdiff_t src_stride, int src_stepx, java.nio.ByteBuffer dst_argb, int dst_width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBRowDownEvenBox_SSE2(src_argb, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), src_stepx, dst_argb, dst_width);
    }
  }

  public static void ScaleARGBCols_SSE2(java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer src_argb, int dst_width, int x, int dx) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBCols_SSE2(dst_argb, src_argb, dst_width, x, dx);
    }
  }

  public static void ScaleARGBFilterCols_SSSE3(java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer src_argb, int dst_width, int x, int dx) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBFilterCols_SSSE3(dst_argb, src_argb, dst_width, x, dx);
    }
  }

  public static void ScaleARGBColsUp2_SSE2(java.nio.ByteBuffer dst_argb, java.nio.ByteBuffer src_argb, int dst_width, int x, int dx) {
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBColsUp2_SSE2(dst_argb, src_argb, dst_width, x, dx);
    }
  }

  public static void ScaleARGBRowDownEven_NEON(java.nio.ByteBuffer src_argb, SWIGTYPE_p_ptrdiff_t src_stride, int src_stepx, java.nio.ByteBuffer dst_argb, int dst_width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBRowDownEven_NEON(src_argb, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), src_stepx, dst_argb, dst_width);
    }
  }

  public static void ScaleARGBRowDownEvenBox_NEON(java.nio.ByteBuffer src_argb, SWIGTYPE_p_ptrdiff_t src_stride, int src_stepx, java.nio.ByteBuffer dst_argb, int dst_width) {
  assert src_argb.isDirect() : "Buffer must be allocated direct.";
  assert dst_argb.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBRowDownEvenBox_NEON(src_argb, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), src_stepx, dst_argb, dst_width);
    }
  }

  public static void ScaleARGBRowDown2_NEON(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBRowDown2_NEON(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleARGBRowDown2Box_NEON(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleARGBRowDown2Box_NEON(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown2_NEON(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown2_NEON(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown2Box_NEON(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown2Box_NEON(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown4_NEON(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown4_NEON(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown4Box_NEON(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown4Box_NEON(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown34_NEON(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown34_NEON(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown34_0_Box_NEON(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown34_0_Box_NEON(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown34_1_Box_NEON(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown34_1_Box_NEON(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown38_NEON(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown38_NEON(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown38_3_Box_NEON(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown38_3_Box_NEON(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown38_2_Box_NEON(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown38_2_Box_NEON(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown2_MIPS_DSPR2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown2_MIPS_DSPR2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown2Box_MIPS_DSPR2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown2Box_MIPS_DSPR2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown4_MIPS_DSPR2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown4_MIPS_DSPR2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown4Box_MIPS_DSPR2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown4Box_MIPS_DSPR2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown34_MIPS_DSPR2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown34_MIPS_DSPR2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown34_0_Box_MIPS_DSPR2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer d, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert d.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown34_0_Box_MIPS_DSPR2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), d, dst_width);
    }
  }

  public static void ScaleRowDown34_1_Box_MIPS_DSPR2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer d, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert d.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown34_1_Box_MIPS_DSPR2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), d, dst_width);
    }
  }

  public static void ScaleRowDown38_MIPS_DSPR2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown38_MIPS_DSPR2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst, dst_width);
    }
  }

  public static void ScaleRowDown38_2_Box_MIPS_DSPR2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown38_2_Box_MIPS_DSPR2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

  public static void ScaleRowDown38_3_Box_MIPS_DSPR2(java.nio.ByteBuffer src_ptr, SWIGTYPE_p_ptrdiff_t src_stride, java.nio.ByteBuffer dst_ptr, int dst_width) {
  assert src_ptr.isDirect() : "Buffer must be allocated direct.";
  assert dst_ptr.isDirect() : "Buffer must be allocated direct.";
    {
      libyuvJNI.ScaleRowDown38_3_Box_MIPS_DSPR2(src_ptr, SWIGTYPE_p_ptrdiff_t.getCPtr(src_stride), dst_ptr, dst_width);
    }
  }

}
