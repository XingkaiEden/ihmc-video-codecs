/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.openh264;

public class SEncParamExt {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected SEncParamExt(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SEncParamExt obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OpenH264JNI.delete_SEncParamExt(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setIUsageType(EUsageType value) {
    OpenH264JNI.SEncParamExt_iUsageType_set(swigCPtr, this, value.swigValue());
  }

  public EUsageType getIUsageType() {
    return EUsageType.swigToEnum(OpenH264JNI.SEncParamExt_iUsageType_get(swigCPtr, this));
  }

  public void setIInputCsp(int value) {
    OpenH264JNI.SEncParamExt_iInputCsp_set(swigCPtr, this, value);
  }

  public int getIInputCsp() {
    return OpenH264JNI.SEncParamExt_iInputCsp_get(swigCPtr, this);
  }

  public void setIPicWidth(int value) {
    OpenH264JNI.SEncParamExt_iPicWidth_set(swigCPtr, this, value);
  }

  public int getIPicWidth() {
    return OpenH264JNI.SEncParamExt_iPicWidth_get(swigCPtr, this);
  }

  public void setIPicHeight(int value) {
    OpenH264JNI.SEncParamExt_iPicHeight_set(swigCPtr, this, value);
  }

  public int getIPicHeight() {
    return OpenH264JNI.SEncParamExt_iPicHeight_get(swigCPtr, this);
  }

  public void setITargetBitrate(int value) {
    OpenH264JNI.SEncParamExt_iTargetBitrate_set(swigCPtr, this, value);
  }

  public int getITargetBitrate() {
    return OpenH264JNI.SEncParamExt_iTargetBitrate_get(swigCPtr, this);
  }

  public void setIRCMode(RC_MODES value) {
    OpenH264JNI.SEncParamExt_iRCMode_set(swigCPtr, this, value.swigValue());
  }

  public RC_MODES getIRCMode() {
    return RC_MODES.swigToEnum(OpenH264JNI.SEncParamExt_iRCMode_get(swigCPtr, this));
  }

  public void setFMaxFrameRate(float value) {
    OpenH264JNI.SEncParamExt_fMaxFrameRate_set(swigCPtr, this, value);
  }

  public float getFMaxFrameRate() {
    return OpenH264JNI.SEncParamExt_fMaxFrameRate_get(swigCPtr, this);
  }

  public void setITemporalLayerNum(int value) {
    OpenH264JNI.SEncParamExt_iTemporalLayerNum_set(swigCPtr, this, value);
  }

  public int getITemporalLayerNum() {
    return OpenH264JNI.SEncParamExt_iTemporalLayerNum_get(swigCPtr, this);
  }

  public void setISpatialLayerNum(int value) {
    OpenH264JNI.SEncParamExt_iSpatialLayerNum_set(swigCPtr, this, value);
  }

  public int getISpatialLayerNum() {
    return OpenH264JNI.SEncParamExt_iSpatialLayerNum_get(swigCPtr, this);
  }

  public void setUiIntraPeriod(long value) {
    OpenH264JNI.SEncParamExt_uiIntraPeriod_set(swigCPtr, this, value);
  }

  public long getUiIntraPeriod() {
    return OpenH264JNI.SEncParamExt_uiIntraPeriod_get(swigCPtr, this);
  }

  public void setINumRefFrame(int value) {
    OpenH264JNI.SEncParamExt_iNumRefFrame_set(swigCPtr, this, value);
  }

  public int getINumRefFrame() {
    return OpenH264JNI.SEncParamExt_iNumRefFrame_get(swigCPtr, this);
  }

  public void setUiFrameToBeCoded(long value) {
    OpenH264JNI.SEncParamExt_uiFrameToBeCoded_set(swigCPtr, this, value);
  }

  public long getUiFrameToBeCoded() {
    return OpenH264JNI.SEncParamExt_uiFrameToBeCoded_get(swigCPtr, this);
  }

  public void setBEnableSpsPpsIdAddition(boolean value) {
    OpenH264JNI.SEncParamExt_bEnableSpsPpsIdAddition_set(swigCPtr, this, value);
  }

  public boolean getBEnableSpsPpsIdAddition() {
    return OpenH264JNI.SEncParamExt_bEnableSpsPpsIdAddition_get(swigCPtr, this);
  }

  public void setBPrefixNalAddingCtrl(boolean value) {
    OpenH264JNI.SEncParamExt_bPrefixNalAddingCtrl_set(swigCPtr, this, value);
  }

  public boolean getBPrefixNalAddingCtrl() {
    return OpenH264JNI.SEncParamExt_bPrefixNalAddingCtrl_get(swigCPtr, this);
  }

  public void setBEnableSSEI(boolean value) {
    OpenH264JNI.SEncParamExt_bEnableSSEI_set(swigCPtr, this, value);
  }

  public boolean getBEnableSSEI() {
    return OpenH264JNI.SEncParamExt_bEnableSSEI_get(swigCPtr, this);
  }

  public void setIPaddingFlag(int value) {
    OpenH264JNI.SEncParamExt_iPaddingFlag_set(swigCPtr, this, value);
  }

  public int getIPaddingFlag() {
    return OpenH264JNI.SEncParamExt_iPaddingFlag_get(swigCPtr, this);
  }

  public void setIEntropyCodingModeFlag(int value) {
    OpenH264JNI.SEncParamExt_iEntropyCodingModeFlag_set(swigCPtr, this, value);
  }

  public int getIEntropyCodingModeFlag() {
    return OpenH264JNI.SEncParamExt_iEntropyCodingModeFlag_get(swigCPtr, this);
  }

  public void setBEnableFrameSkip(boolean value) {
    OpenH264JNI.SEncParamExt_bEnableFrameSkip_set(swigCPtr, this, value);
  }

  public boolean getBEnableFrameSkip() {
    return OpenH264JNI.SEncParamExt_bEnableFrameSkip_get(swigCPtr, this);
  }

  public void setIMaxBitrate(int value) {
    OpenH264JNI.SEncParamExt_iMaxBitrate_set(swigCPtr, this, value);
  }

  public int getIMaxBitrate() {
    return OpenH264JNI.SEncParamExt_iMaxBitrate_get(swigCPtr, this);
  }

  public void setIMaxQp(int value) {
    OpenH264JNI.SEncParamExt_iMaxQp_set(swigCPtr, this, value);
  }

  public int getIMaxQp() {
    return OpenH264JNI.SEncParamExt_iMaxQp_get(swigCPtr, this);
  }

  public void setIMinQp(int value) {
    OpenH264JNI.SEncParamExt_iMinQp_set(swigCPtr, this, value);
  }

  public int getIMinQp() {
    return OpenH264JNI.SEncParamExt_iMinQp_get(swigCPtr, this);
  }

  public void setUiMaxNalSize(long value) {
    OpenH264JNI.SEncParamExt_uiMaxNalSize_set(swigCPtr, this, value);
  }

  public long getUiMaxNalSize() {
    return OpenH264JNI.SEncParamExt_uiMaxNalSize_get(swigCPtr, this);
  }

  public void setBEnableLongTermReference(boolean value) {
    OpenH264JNI.SEncParamExt_bEnableLongTermReference_set(swigCPtr, this, value);
  }

  public boolean getBEnableLongTermReference() {
    return OpenH264JNI.SEncParamExt_bEnableLongTermReference_get(swigCPtr, this);
  }

  public void setILTRRefNum(int value) {
    OpenH264JNI.SEncParamExt_iLTRRefNum_set(swigCPtr, this, value);
  }

  public int getILTRRefNum() {
    return OpenH264JNI.SEncParamExt_iLTRRefNum_get(swigCPtr, this);
  }

  public void setILtrMarkPeriod(long value) {
    OpenH264JNI.SEncParamExt_iLtrMarkPeriod_set(swigCPtr, this, value);
  }

  public long getILtrMarkPeriod() {
    return OpenH264JNI.SEncParamExt_iLtrMarkPeriod_get(swigCPtr, this);
  }

  public void setIMultipleThreadIdc(int value) {
    OpenH264JNI.SEncParamExt_iMultipleThreadIdc_set(swigCPtr, this, value);
  }

  public int getIMultipleThreadIdc() {
    return OpenH264JNI.SEncParamExt_iMultipleThreadIdc_get(swigCPtr, this);
  }

  public void setILoopFilterDisableIdc(int value) {
    OpenH264JNI.SEncParamExt_iLoopFilterDisableIdc_set(swigCPtr, this, value);
  }

  public int getILoopFilterDisableIdc() {
    return OpenH264JNI.SEncParamExt_iLoopFilterDisableIdc_get(swigCPtr, this);
  }

  public void setILoopFilterAlphaC0Offset(int value) {
    OpenH264JNI.SEncParamExt_iLoopFilterAlphaC0Offset_set(swigCPtr, this, value);
  }

  public int getILoopFilterAlphaC0Offset() {
    return OpenH264JNI.SEncParamExt_iLoopFilterAlphaC0Offset_get(swigCPtr, this);
  }

  public void setILoopFilterBetaOffset(int value) {
    OpenH264JNI.SEncParamExt_iLoopFilterBetaOffset_set(swigCPtr, this, value);
  }

  public int getILoopFilterBetaOffset() {
    return OpenH264JNI.SEncParamExt_iLoopFilterBetaOffset_get(swigCPtr, this);
  }

  public void setBEnableDenoise(boolean value) {
    OpenH264JNI.SEncParamExt_bEnableDenoise_set(swigCPtr, this, value);
  }

  public boolean getBEnableDenoise() {
    return OpenH264JNI.SEncParamExt_bEnableDenoise_get(swigCPtr, this);
  }

  public void setBEnableBackgroundDetection(boolean value) {
    OpenH264JNI.SEncParamExt_bEnableBackgroundDetection_set(swigCPtr, this, value);
  }

  public boolean getBEnableBackgroundDetection() {
    return OpenH264JNI.SEncParamExt_bEnableBackgroundDetection_get(swigCPtr, this);
  }

  public void setBEnableAdaptiveQuant(boolean value) {
    OpenH264JNI.SEncParamExt_bEnableAdaptiveQuant_set(swigCPtr, this, value);
  }

  public boolean getBEnableAdaptiveQuant() {
    return OpenH264JNI.SEncParamExt_bEnableAdaptiveQuant_get(swigCPtr, this);
  }

  public void setBEnableFrameCroppingFlag(boolean value) {
    OpenH264JNI.SEncParamExt_bEnableFrameCroppingFlag_set(swigCPtr, this, value);
  }

  public boolean getBEnableFrameCroppingFlag() {
    return OpenH264JNI.SEncParamExt_bEnableFrameCroppingFlag_get(swigCPtr, this);
  }

  public void setBEnableSceneChangeDetect(boolean value) {
    OpenH264JNI.SEncParamExt_bEnableSceneChangeDetect_set(swigCPtr, this, value);
  }

  public boolean getBEnableSceneChangeDetect() {
    return OpenH264JNI.SEncParamExt_bEnableSceneChangeDetect_get(swigCPtr, this);
  }

  public SSpatialLayerConfig getSpatialLayer(int layer) {
    long cPtr = OpenH264JNI.SEncParamExt_getSpatialLayer(swigCPtr, this, layer);
    return (cPtr == 0) ? null : new SSpatialLayerConfig(cPtr, false);
  }

  public SEncParamExt() {
    this(OpenH264JNI.new_SEncParamExt(), true);
  }

}
