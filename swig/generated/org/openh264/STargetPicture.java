/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.openh264;

public class STargetPicture {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected STargetPicture(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(STargetPicture obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        codec_apiJNI.delete_STargetPicture(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public SWIGTYPE_p_p_unsigned_char getPpDst() {
    long cPtr = codec_apiJNI.STargetPicture_ppDst_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_unsigned_char(cPtr, false);
  }

  public SBufferInfo getInfo() {
    long cPtr = codec_apiJNI.STargetPicture_info_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SBufferInfo(cPtr, false);
  }

  public STargetPicture() {
    this(codec_apiJNI.new_STargetPicture(), true);
  }

  public void getY(java.nio.ByteBuffer Y) {
  assert Y.isDirect() : "Buffer must be allocated direct.";
    {
      codec_apiJNI.STargetPicture_getY(swigCPtr, this, Y);
    }
  }

  public void getU(java.nio.ByteBuffer U) {
  assert U.isDirect() : "Buffer must be allocated direct.";
    {
      codec_apiJNI.STargetPicture_getU(swigCPtr, this, U);
    }
  }

  public void getV(java.nio.ByteBuffer V) {
  assert V.isDirect() : "Buffer must be allocated direct.";
    {
      codec_apiJNI.STargetPicture_getV(swigCPtr, this, V);
    }
  }

}
