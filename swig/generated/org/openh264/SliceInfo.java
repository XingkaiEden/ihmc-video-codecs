/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.openh264;

public class SliceInfo {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected SliceInfo(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SliceInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OpenH264JNI.delete_SliceInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setICodedSliceCount(int value) {
    OpenH264JNI.SliceInfo_iCodedSliceCount_set(swigCPtr, this, value);
  }

  public int getICodedSliceCount() {
    return OpenH264JNI.SliceInfo_iCodedSliceCount_get(swigCPtr, this);
  }

  public void setIFecType(int value) {
    OpenH264JNI.SliceInfo_iFecType_set(swigCPtr, this, value);
  }

  public int getIFecType() {
    return OpenH264JNI.SliceInfo_iFecType_get(swigCPtr, this);
  }

  public void setUiSliceIdx(short value) {
    OpenH264JNI.SliceInfo_uiSliceIdx_set(swigCPtr, this, value);
  }

  public short getUiSliceIdx() {
    return OpenH264JNI.SliceInfo_uiSliceIdx_get(swigCPtr, this);
  }

  public void setUiSliceCount(short value) {
    OpenH264JNI.SliceInfo_uiSliceCount_set(swigCPtr, this, value);
  }

  public short getUiSliceCount() {
    return OpenH264JNI.SliceInfo_uiSliceCount_get(swigCPtr, this);
  }

  public void setIFrameIndex(char value) {
    OpenH264JNI.SliceInfo_iFrameIndex_set(swigCPtr, this, value);
  }

  public char getIFrameIndex() {
    return OpenH264JNI.SliceInfo_iFrameIndex_get(swigCPtr, this);
  }

  public void setUiNalRefIdc(short value) {
    OpenH264JNI.SliceInfo_uiNalRefIdc_set(swigCPtr, this, value);
  }

  public short getUiNalRefIdc() {
    return OpenH264JNI.SliceInfo_uiNalRefIdc_get(swigCPtr, this);
  }

  public void setUiNalType(short value) {
    OpenH264JNI.SliceInfo_uiNalType_set(swigCPtr, this, value);
  }

  public short getUiNalType() {
    return OpenH264JNI.SliceInfo_uiNalType_get(swigCPtr, this);
  }

  public void setUiContainingFinalNal(short value) {
    OpenH264JNI.SliceInfo_uiContainingFinalNal_set(swigCPtr, this, value);
  }

  public short getUiContainingFinalNal() {
    return OpenH264JNI.SliceInfo_uiContainingFinalNal_get(swigCPtr, this);
  }

  public int getLengthOfSlices(int slice) {
    return OpenH264JNI.SliceInfo_getLengthOfSlices(swigCPtr, this, slice);
  }

  public void getSlice(int slice, java.nio.ByteBuffer target) {
  assert target.isDirect() : "Buffer must be allocated direct.";
    {
      OpenH264JNI.SliceInfo_getSlice(swigCPtr, this, slice, target);
    }
  }

  public SliceInfo() {
    this(OpenH264JNI.new_SliceInfo(), true);
  }

}
